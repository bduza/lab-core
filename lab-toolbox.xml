<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Sandbox</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Combat Console</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Append to combat console</name>
					<script>if not line:find('Your gun is empty') and not line:find('Your gun is reloaded') then
  --echo('combat.console', '\n')
  selectCurrentLine()
  copy()
  appendBuffer('combat.console')
  --appendBuffer('lab.gbox.combatconsole')
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>[Wetwiring]:</string>
						<string>[Mindsim]:</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
						<integer>2</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Append at prompt cr</name>
					<script>tmp = tmp or {}
tmp.combatconsole = line</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>6</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You have slain</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Append on prompt</name>
						<script>cecho('combat.console', '\n' .. tmp.combatconsole .. '\n')
setTriggerStayOpen('Append at prompt cr', 0)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string></string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>7</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Wetwiring Stuff</name>
					<script>selectCurrentLine()
copy()
appendBuffer('lab.gbox.combatconsole')
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>[Wetwiring]:</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Wetwiring Mend Used</name>
						<script>-- bal lost
-- update to gauge values
-- mark as system in recovery
deleteLine()
--cecho("&lt;SeaGreen&gt;[WW] Mend " .. matches[2] .. ': ' .. matches[3])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>(\w+) system damage repaired. Subsystem health: (\d+\.\d+)%\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Wetwiring balance recovered</name>
						<script>--deleteLine()
--cecho("&lt;SeaGreen&gt;[WW] Mend balance regained.")
raiseEvent('pvp')
raiseEvent('heal')</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>[Wetwiring]: You may now use another active wetwiring mending.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Mend Efficacy Update</name>
						<script>local sys = matches[2]
local efficacy = matches[3]

stats[sys .. 'eff'] = tonumber(efficacy)

deleteLine()
--cecho("&lt;SeaGreen&gt;[WW] %s Mend efficacy: %s" %{sys, efficacy})
raiseEvent('pvp')
raiseEvent('heal')</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Resistance in your (\w+) system has been reduced. Your next mending operation will operate at (\d+)% efficacy\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Ww Health Regen</name>
						<script>deleteLine()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>health regenerated.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>GATE: MWP Hit</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>MWP</string>
						<string>(hit)</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>0</integer>
						<integer>0</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>The actual line</name>
						<script>local tar = matches[2]
local ability = matches[3]

if string.find(tar, target) then tar = target end

local cmsg = string.format('&lt;yellow&gt;%s &lt;grey&gt;: %s', tar, attack)
cecho('combat.console', cmsg)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(.+)\: (MWP \w+ \(hit\))\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Bleed Capture</name>
					<script>local cmsg = string.format('&lt;IndianRed&gt;%s &lt;grey&gt;: %s\n', 'Damage Dealt: Bleeding (unblockable)', multimatches[2][2])
cecho('combat.console', cmsg)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>1</conditonLineDelta>
					<mStayOpen>5</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Damage Dealt:</string>
						<string>(\d+) unblockable</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
						<integer>1</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>on prompt</name>
						<script>--if pvp.targetslain then pvp.run() end
setTriggerStayOpen('Bleed Capture', 0)
if hunt.currentmode and guns.step == 'targetisdead' then guns.hunt() end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#aa0000</mFgColor>
						<mBgColor>#000000</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string></string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>7</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>You have slain</name>
						<script>guns.step = 'targetisdead'</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#aa0000</mFgColor>
						<mBgColor>#000000</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You have slain</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>GATE: Combat Messages: You</name>
					<script>pvp.queued = false
prompt.queued = false

selectCurrentLine()
--fg('navy')
setUnderline(true)
--setOverline(true)
deselect()
resetFormat()
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>20</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You:</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Balance</name>
						<script>local baltime = matches[2]
cecho('combat.console', ' (' .. matches[2] .. ')')

deleteLine()

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Balance used: (\d+\.\d+)s\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Close it</name>
						<script>setTriggerStayOpen('GATE: Combat Messages: You', 0)

 echo('combat.console', '\n') 
 echo('just na test')</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string></string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>7</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Damage</name>
						<script>--local baltime = matches[2]
local dam = matches[2]
local damtype = matches[3]

if pvp.damtypeconv[damtype] then
	damtype = pvp.damtypeconv[damtype]
end


cecho('combat.console', ' (%s %s)' %{dam, damtype})

deleteLine()

fg('sienna')
setUnderline(true)
echo(' (%s %s)' %{dam, damtype})
resetFormat()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Damage Dealt\: (\d+) (\w+)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>YOu:</name>
						<script>
local attack = '&lt;green&gt;' .. matches[2]

local tar = matches[3]

-----------------------------------------------------------
-- The long name suck, so lets try to choose a shorter one:
-----------------------------------------------------------
if string.find(tar, target) then tar = target end

if hunt.nameconv[tar] then
	tar = hunt.nameconv[tar]
end
-----------------------------------------------------------

local cmsg = string.format('You: %s &lt;grey&gt;-&gt; %s', attack, tar)

cecho('combat.console', cmsg)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You\: (.+) \-&gt; (.+)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Missile</name>
						<script>
cecho('combat.console', 'You: &lt;green&gt;' .. matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You\: ([A-Za-z ]+)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>VictoryRush</name>
						<script>--selectCurrentLine()
deleteLine()

fg('DodgerBlue')
setUnderline(true)
echo(' (+VR)')
resetFormat()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>The exhilaration of victory rushes over you, suffusing your limbs with energy.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>You have slain</name>
						<script>deleteLine()

fg('firebrick')
setUnderline(true)
echo(' (TARGET SLAIN)')
resetFormat()
raiseEvent('target slain')</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You have slain</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Target CMSG</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>12</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ffaa7f</mFgColor>
					<mBgColor>#000000</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>-&gt; you.</string>
						<string>The fire that flickers around</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>0</integer>
						<integer>2</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Firewreathe</name>
						<script>local name = matches[2]
local attk = 'Firewreathe'
local msg = string.format("\n%s: &lt;red&gt;%s&lt;grey&gt; -&gt; You.", name, attk)

cecho('combat.console', msg)
creplaceLine(msg)
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^The fire that flickers around (\w+) burns you as well, the blistering ache of heat sinking deep into your bones\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Name: does this -&gt; you.</name>
						<script>selectCurrentLine()
copy()
appendBuffer('combat.console')</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#000000</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^([A-Z][a-z]+): (.+) -&gt; you\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Damage Dealt</name>
						<script>--local baltime = matches[2]
local dam = matches[2]
local damtype = matches[3]

if pvp.damtypeconv[damtype] then
	damtype = pvp.damtypeconv[damtype]
end


cecho('combat.console', ' (%s %s)' %{dam, damtype})

deleteLine()

fg('sienna')
setUnderline(true)
echo(' (-%s %s)' %{dam, damtype})
resetFormat()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Damage Taken\: (\d+) (.+)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>End on prompt</name>
						<script>setTriggerStayOpen('Target CMSG', 0)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string></string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>7</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>You fall to the ground!</name>
					<script>selectCurrentLine()
copy()
appendBuffer('combat.console')</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>1</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You fall to the ground!</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Balance Used</name>
						<script>selectCurrentLine()
copy()
appendBuffer('combat.console')</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Balance used:</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Scorched DoT Gate</name>
					<script>deleteLine()
tmp = {}</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>1</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Flames lick around</string>
						<string>^Flames lick around (\w+), scorching h.. skin\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>0</integer>
						<integer>1</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Scorched DoT Capture</name>
						<script>local cmsg = string.format('&lt;IndianRed&gt;%s &lt;grey&gt;: %s\n', 'Damage Dealt: Scorched Aff', multimatches[2][2])
cecho('combat.console', cmsg)


creplaceLine(cmsg)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>1</conditonLineDelta>
						<mStayOpen>5</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Damage Dealt:</string>
							<string>(\d+ thermal, gun)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
							<integer>1</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>on prompt</name>
							<script>--if pvp.targetslain then pvp.run() end
setTriggerStayOpen('Scorched DoT Capture', 0)
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#aa0000</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string></string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>7</integer>
							</regexCodePropertyList>
						</Trigger>
					</Trigger>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>AB Skills</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>AB Skill List</name>
					<script>clearWindow('abskills.console')
selectCurrentLine()
copy()
appendBuffer('abskills.console')
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>33</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>-- Skills for </string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>General Lines</name>
						<script>selectCurrentLine()
copy()
appendBuffer('abskills.console')</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>General Skills:</string>
							<string>General Skills:</string>
							<string>Trade Skills:</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>End it</name>
						<script>selectCurrentLine()
copy()
appendBuffer('abskills.console')
setTriggerStayOpen('AB Skill List', 0)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>---------------------------------------------------------------- Lessons:</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Skill To be Sent</name>
						<script>local skill = matches[2]
local max = matches[4]
local cur = matches[3]
local perc = tonumber(cur)/tonumber(max)*100

local calcfiller = lab.calcFiller

local filler = calcfiller(skill, 20,'.')

cechoLink('abskills.console', string.format(" &lt;DodgerBlue&gt;%s:&lt;lavender&gt;%s%s/%s (%.f%%)\n", skill, filler, cur, max, perc), [[expandAlias('ab ]] .. skill .. [[')]], 'Click for more information on this skill.', true)

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\s\s(\w+)\s+(\d+)\/(\d+)\[</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>AB Ability List</name>
					<script>clearWindow('abskills.console')
selectCurrentLine()
copy()
appendBuffer('abskills.console')</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>99</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>-------------</string>
						<string>Abilities in (\w+)</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
						<integer>1</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>General Lines</name>
						<script>selectCurrentLine()
copy()
appendBuffer('abskills.console')</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Ability              Info  </string>
							<string>---------------------------------------------------------------------------------------</string>
							<string>^\w+$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
							<integer>2</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>End it</name>
						<script>selectCurrentLine()
copy()
appendBuffer('abskills.console')
cechoLink('abskills.console', 'Click to return to AB', [[send('ab')]], 'Click to show all skill lists.', true)

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Your current knowledge:</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Ability Link</name>
						<script>local ability = matches[2]
local desc = matches[3]

--local filler = lab.calcFiller(ability, 20,' ')
local namecol = 'DimGrey'
if matches[4] == '--' then  namecol = 'LightGoldenrod' end
--cecho('\n&lt;red&gt;'..matches[3]) ;
cechoLink('abskills.console', string.format(" &lt;%s&gt;%s&lt;white&gt;%s\n", namecol, ability, desc), [[expandAlias('ab ]] .. ability .. [[')]], 'Click for more information on this ability.', true)

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+)(\s\s\s+[A-Z].+)(\d+)$</string>
							<string>^(\w+)(\s\s\s+[A-Z].+)(\-\-)$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>AB Ability</name>
					<script>


local ability = multimatches[2][2]
local skill = multimatches[2][3]
local desc = multimatches[4][2]

abskills.currentSkill = skill


clearWindow('abskills.console')
--selectCurrentLine()
--copy()
--appendBuffer('abskills.console')

--need to select previous line, copy, append, then current

cechoLink('abskills.console', string.format("&lt;DarkViolet&gt;-- &lt;SkyBlue&gt;%s (%s) &lt;DarkViolet&gt;-------------------------------------------------------",ability,skill), [[print('hi there')]], 'Click to return', true)
echo('abskills.console', '\n' .. desc .. '\n')</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>1</conditonLineDelta>
					<mStayOpen>99</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>-- </string>
						<string>-- (\w+) \((\w+)\) -----</string>
						<string>1</string>
						<string>^(.+)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
						<integer>1</integer>
						<integer>5</integer>
						<integer>1</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Second Gate - Post description</name>
						<script>selectCurrentLine()
copy()
appendBuffer('abskills.console')</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>----------------------------------------------------------------------------</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>End it</name>
						<script>
setTriggerStayOpen('AB Ability', 0)
echo('\n\n')
cechoLink('abskills.console', 'Click to return to AB ' .. abskills.currentSkill, [[print('ab ']] .. abskills.currentSkill .. [[)]], 'Click to return to ' .. abskills.currentSkill, true)

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\w+\:</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>7</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Other stuff</name>
						<script>selectCurrentLine()
copy()
appendBuffer('abskills.console')

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\w+\:</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Hacking</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Enter Commsphere</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You enter the commsphere.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Start of Commsphere Map</name>
					<script>clearWindow('lab.textmap')</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>13</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>This room has not been mapped.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Cap it</name>
						<script>selectCurrentLine()
copy()
appendBuffer('lab.textmap')
--deleteLine()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^.+$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>End it</name>
						<script>setTriggerStayOpen('Start of Commsphere Map', 0)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string></string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>7</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Dir List to Combat</name>
					<script>selectCurrentLine()
copy()

appendBuffer('combat.console')

hacking.cleartars()
hacking.display()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>10</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Directory list of</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Cap it</name>
						<script>selectCurrentLine()
copy()

appendBuffer('combat.console')</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^.+$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>End it</name>
						<script>setTriggerStayOpen('Directory List to Combat', 0)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string></string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>7</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>ICE LIST</name>
					<script>hacking.cleartars()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>12</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>ICE/</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Cap the targets</name>
						<script>local tar = matches[2]
hacking.addtar(tar)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>@([a-z_\-]+)\s+</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>End on /routes</name>
						<script>setTriggerStayOpen('ICE LIST', 0)
hacking.display()
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Routes/</string>
							<string>Devices/</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>.Delete</name>
					<script>send('look')</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>.Delete()</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Use Sync</name>
					<script>sync:spend(tonumber( multimatches[2][2] ))</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ffaa00</mFgColor>
					<mBgColor>#000000</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>UseSync</string>
						<string>^UseSync\(([0-9\.]+)\)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Sync();</name>
					<script>sync:balback()
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#00aaff</mFgColor>
					<mBgColor>#000000</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Sync()</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Prompt Stuff</name>
				<script>local hp = tonumber(multimatches[2][2])
local maxhp = multimatches[2][3]
local prevhp = tonumber(prompt.hp)
--
if prevhp ~= hp then
  local diff = tostring(hp - prevhp)
  local col = '&lt;green&gt;'
  if hp &lt; prevhp then
    col = '&lt;red&gt;'
  end
  cecho(' %s(%s)' % {col, diff})
   prompt.hp = hp
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>Health:</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>2</integer>
				</regexCodePropertyList>
			</Trigger>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Shop Management - Pricing Etc</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>99</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>Short name:    sully's</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>2</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>End on prompt</name>
					<script>setTriggerStayOpen('Shop Management - Pricing Etc', 0)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string></string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>7</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Match it and add links</name>
					<script>local item = matches[2]
local price = matches[3]

s = ' &lt;LightSkyBlue&gt;[&lt;lavender&gt;U&lt;LightSkyBlue&gt;]'

cmd = [[shopsys.unstock('%s')]] %{item}

cechoLink(s, cmd, 'Click to unstock it...', true)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^[a-z]+([0-9]+)\s+.+?\s+(\d+)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Armour Tracking</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Armour Probe - Worn</name>
					<script>tmp = tmp or {}
tmp.id = multimatches[4][2]</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>99</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>--</string>
						<string>(#</string>
						<string>---------</string>
						<string>\(#(\d+)\)</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
						<integer>0</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Capture resistances</name>
						<script>local restype = string.lower(matches[2])
local resval = tonumber(matches[3])

if atable.worn[tmp.slot]['id'] == tmp.id then
	atable.worn[tmp.slot][restype] = resval
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\s{2,}(\w+)[\s\:]+([0-9\.]+)%$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Grade</name>
						<script>local grade = matches[2]:lower()

if atable.worn[tmp.slot]['id'] == tmp.id then
	atable.worn[tmp.slot].grade = grade
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Grade\:\s+(Light|Medium|Heavy)$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>End it</name>
						<script>setTriggerStayOpen('Armour Probe - Worn', 0)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffaaff</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string></string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>7</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Bodypart Slot Cap</name>
						<script>tmp.slot = string.lower(matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#55ffff</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Slot\:\s+(\w+)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Matchall and delete</name>
						<script>deleteLine()


	atable[tmp.slot][tmp.id].smartcore = 'L'
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^.+$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Armour Probe Capture</name>
					<script>tmp = {}
tmp.id = multimatches[3][2]</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>99</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>--</string>
						<string>#</string>
						<string>\(#(\d+)\)</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
						<integer>0</integer>
						<integer>1</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Capture resistances</name>
						<script>local restype = string.lower(matches[2])
local resval = tonumber(matches[3])

tmp[restype] = resval</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\s{2,}(\w+)[\s\:]+([0-9\.]+)%$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>End it</name>
						<script>setTriggerStayOpen('Armour Probe Capture', 0)

display(tmp)

local id = tmp.id
local slot = tmp.slot

if armour.atable[slot][id] then
	armour.atable[slot][id].grade = tmp.grade
	armour.atable[slot][id].smartcore = tmp.smartcore
	armour.atable[slot][id].impact = tmp.impact
	armour.atable[slot][id].em = tmp.em
	armour.atable[slot][id].thermal = tmp.thermal
	armour.atable[slot][id].cellular = tmp.cellular
	armour.atable[slot][id].mental = tmp.mental
	armour.atable[slot][id].draining = tmp.draining
	armour.atable[slot][id].electric = tmp.electric
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffaaff</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string></string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>7</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Bodypart Slot Cap</name>
						<script>tmp.slot = string.lower(matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#55ffff</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Slot\:\s+(\w+)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Matchall and delete</name>
						<script>--deleteLine()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^.+$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Grade - inv</name>
						<script>tmp.grade = matches[2]:lower()
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Grade\:\s+(Light|Medium|Heavy)$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Grade - worn</name>
						<script>tmp.grade = matches[2]:lower()
tmp.smartcore = 'L'</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Category\:\s+(Light|Medium|Heavy)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Smartcore</name>
						<script>tmp.smartcore = 'L'
if matches[2] == 'Unformed' then
  tmp.smartcore = 'U'
end

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>SmartCore\:\s+(.+?)$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Worn Armour - Compare</name>
					<script>--[[atable = atable or {}
atable.order = {'head', 'torso', 'waist', 'arms', 'hands', 'legs', 'feet',}
--
atable.worn = {}
for _,slot in ipairs(atable.order) do
	atable.worn[slot] = {}

end
]]--</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>99</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>-----------------------------------&lt; Used armor &gt;-----------------------------------</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>End on prompt</name>
						<script>setTriggerStayOpen('Worn Armour - Compare', 0)

armour.probeall()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string></string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>7</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Capture the armour -worn</name>
						<script>local aline = matches[1]
local slot = matches[2]
local id = matches[3]
local desc = matches[4]
local lvl = matches[5]
local qual = matches[6]
local health = matches[7]


armour.add(id, slot, desc, qual, health, lvl, 'wie', true)
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+)\s+(\d+)\s+(.+?)\s+(\d+)\s{2,}([0-9\.]+)%\s+(\d+)%$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Inventory Armour - Compare</name>
					<script>--[[atable = atable or {}
atable.order = {'head', 'torso', 'waist', 'arms', 'hands', 'legs', 'feet',}
--
for _,slot in ipairs(atable.order) do
	atable[slot] = {}
end
]]--

armour.clear()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>99</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>--------------------------------&lt; Inventory armor &gt;---------------------------------</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>End on prompt</name>
						<script>setTriggerStayOpen('Inventory Armour - Compare', 0)

--[[
enableTrigger('Armour Probe - Inventory')
local disableArmourProbeWorn = tempTimer(4, function()
	 		disableTrigger('Armour Probe - Inventory')
	 end)
]]--

--[[
for _,slot in ipairs(atable.order) do
	for id,_ in pairs(atable[slot]) do
		send('probe ' .. id, false)
	end
end
cecho('&lt;sienna&gt;\nArmour capture complete...\n')
--send('\n')]]--</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string></string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>7</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Capture the armour - -inv</name>
						<script>local aline = matches[1]
local slot = matches[2]
local id = matches[3]
local desc = matches[4]
local lvl = matches[5]
local qual = matches[6]
local health = matches[7]


armour.add(id, slot, desc, qual, health, lvl, 'inv', true)


-- Compare link
local s = ' &lt;LightSkyBlue&gt;[&lt;lavender&gt;C&lt;LightSkyBlue&gt;]'
local cmd = [[send('compare %s')]] %{id}
cechoLink(s, cmd, 'Click to compare.', true)

-- Wear (armour upgrade) link
s = ' &lt;LightSkyBlue&gt;[&lt;lavender&gt;W&lt;LightSkyBlue&gt;]'
cmd = [[send('armor upgrade %s with %s')]] %{bodyp, id}
cechoLink(s, cmd, 'Click to wear it...', true)

-- Junk Scrap (item) link
s = ' &lt;LightSkyBlue&gt;[&lt;lavender&gt;W&lt;LightSkyBlue&gt;]'
cmd = [[send('junk scrap %s')]] %{id}
cechoLink(s, cmd, 'Click to scrap it...', true)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+)\s+(\d+)\s+(.+?)\s{1,}(\d+)\s\s+([0-9\.]+)%\s+(\d+)%$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Weapon Tracking</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Weapon List All</name>
					<script>weaponry.clear()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>99</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#55aaff</mFgColor>
					<mBgColor>#000000</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You are holding:</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Inventory Weapon Gate</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>shield</string>
							<string>minigun</string>
							<string>launcher</string>
							<string>wristblade</string>
							<string>railgun</string>
							<string>toolkit</string>
							<string>netlauncher</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Cap the weapon</name>
							<script>local short = matches[2]
local id = matches[3]
local name = matches[4]:gsub(" %(genelocked%)", '')


weaponry.add(id, short, name, 'inv', false)</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+?)(\d+)\s+(.+?)$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>End on prompt</name>
						<script>setTriggerStayOpen('Weapon List All', 0)
disableTrigger('Weapon List All')

if getclass() == 'beast' then
else
  weaponry:probeall()
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>----------------------------------------------------------------- B.E.A.S.T. --</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>II Weapon</name>
					<script>local class = getclass()

if class == 'nanoseer' then
	if line:find('wearing') then
		weaponry:clear()
		tmp = tmp or {}
		tmp.loc = 'wie'
		
	end
else
	if line:find('wielding') then
		weaponry:clear()
		tmp = tmp or {}
		tmp.loc = 'wie'
	end
end


</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>99</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You are wielding:</string>
						<string>You are wearing:</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
						<integer>2</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Weap Types</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>toolkit</string>
							<string>piece</string>
							<string>knuckles</string>
							<string>goggles</string>
							<string>gauntlet</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Cap the weapon</name>
							<script>local short = matches[2]
local id = matches[3]
local name = matches[4]
name = name:gsub('%(genelocked%)', '')

weaponry.add(id, short, name, tmp.loc, false)</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#aaffff</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+?)(\d+)\s+(.+?)$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Inventory</name>
						<script>tmp.loc = 'inv'</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You are holding:</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>End it</name>
						<script>setTriggerStayOpen('II Weapon', 0)
disableTrigger('II Weapon')
weaponry.probeall()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string></string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>7</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
				<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Weapon Probe Capture</name>
					<script>tmp = {}
tmp.weaptype = multimatches[2][2]
tmp.weapid = multimatches[2][3]</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>15</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>--</string>
						<string>(\w+) \(#(\d+)\)</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
						<integer>1</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>End on ------------</name>
						<script>setTriggerStayOpen('Weapon Probe Capture', 0)
--display(tmp)

weaponry.wtable[tmp.weaptype][tmp.weapid]['power'] = tmp.power
weaponry.wtable[tmp.weaptype][tmp.weapid]['health'] = tmp.health
weaponry.wtable[tmp.weaptype][tmp.weapid]['level'] = tmp.level
weaponry.wtable[tmp.weaptype][tmp.weapid]['genelock'] = tmp.genelock:lower()

weaponry.wtable[tmp.weaptype][tmp.weapid]['durability'] = tmp.durability</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>-------------------------------------------------------------------------------</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Health</name>
						<script>tmp.health = matches[2]</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Health\:\s+.+\s\((\d+)%\)  </string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Power</name>
						<script>tmp.power = matches[2]</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Power\:\s+(\d+)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Min Level</name>
						<script>tmp.level = matches[2]</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string> Min\.level\:\s+(\d+)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Genelocked</name>
						<script>tmp.genelock = matches[2]</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Genelock\:\s+(Unlocked|Locked)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Gag it</name>
						<script>deleteLine()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>.+</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Durabil;ity</name>
						<script>local dur = matches[2]
local conv = {Fragile = ' f', Average = ' a', Sturdy = ' s', ['V.sturdy'] = 'vs'}
if not conv[dur] then
	error('NO SUCH Durability exists in conv table.')
else
	dur = conv[dur]
end


tmp.durability = dur</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Durability\:\s+([A-Za-z\.]+)\s</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>MWP Slot Gate</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>30</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#55aaff</mFgColor>
					<mBgColor>#000000</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>-- Mobile Weapons Platform ----------------------------------------------------</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Cap the mwp mounted weapon</name>
						<script>local short = matches[2]
local id = matches[3]
local name = matches[4]
local level = matches[7]
local power = matches[6]
local slot = mwp.conv[short]
local health = matches[8]
local mounted = false
if matches[5] == 'X' then
	mounted = true
end
if mounted then
	mwp[slot] = short
end




weaponry.add(id, short, name, 'mwp')

weaponry.wtable[short][id]['power'] = power
weaponry.wtable[short][id]['health'] = health
weaponry.wtable[short][id]['level'] = level
weaponry.wtable[short][id]['genelock'] = 'locked'
weaponry.wtable[short][id]['durability'] = '??'





--[[
local weaps = {
	small = {'wristblade', 'shield'},
	medium = {'netlauncher', 'minigun',},
	large = {'launcher', 'railgun',},
	}
	
for _,weapon in ipairs(weaps[slot]) do
	if string.find(name, weapon) then
		short = weapon
		
	]]--</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+)\s+(\d+)\s+(.+?)\s\s+(X)?\s+(\d+)\s+(\d+)\s+(\d+)%$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>End on prompt</name>
						<script>setTriggerStayOpen('MWP Slot Gate', 0)
disableTrigger('MWP Slot Gate')
weaponry:probeall()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string></string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>7</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Shop Search Linkifier</name>
				<script>tmp.currentSearch = multimatches[2][2]</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>99</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>---------------------</string>
					<string>matching\: (\w+)</string>
					<string>&lt; Wares matching:</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>2</integer>
					<integer>1</integer>
					<integer>0</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Result</name>
					<script>local shop = matches[2]
selectCaptureGroup(2)
setUnderline(true)
local cmd = [[send('tt browse %s');tmp.shopname = '%s']] %{shop, shop}
setLink(cmd, 'Click to browse shop.')
resetFormat()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(.+?)\s+.+?\s+\d+$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>New TriggerEnd it</name>
					<script>setTriggerStayOpen('Shop Search Linkifier', 0)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Total:</string>
						<string></string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
						<integer>7</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Evasion Test</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Varrana lashes</name>
					<script>evtest.attack('varrana', 'lashes')</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>A green-scaled varrana lashes out at you with sharp claws.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Varrana swings</name>
					<script>evtest.attack('varrana', 'shreds')</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>A green-scaled varrana swings its massive claws at you, shredding flesh to ribbons.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Varrana bites</name>
					<script>evtest.attack('varrana', 'bites')</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You scream out in agony as a green-scaled varrana viciously bites you.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Evtest Trigger</name>
					<script>print('success!')
evtest.trigger = false</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>20</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>return evtest.trigger</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Ww Regen</name>
						<script>local healed = tonumber(multimatches[2][2])
evtest.healed( healed )</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#55ff7f</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>[Wetwiring]: </string>
							<string>(\d+) health regenerated</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>You skillfully avoid some of the damage!</name>
						<script>evtest.evaded()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#000000</mFgColor>
						<mBgColor>#ffaaff</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You skillfully avoid some of the damage!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>End on prompt</name>
						<script>evtest.prompt()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string></string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>7</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
			</TriggerGroup>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Prompt</name>
				<script>selectCurrentLine()
replace('')
deselect()

prompt.EM()
prompt.health()
prompt.resource()
prompt.bals()

prompt.effects.general()

prompt.subsys()

prompt.tartracker.general()

prompt.target()

prompt.channel()
local hp = tonumber(multimatches[2][2])
prompt.hpchange(hp)
prompt.queue()

prompt.gag()</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string></string>
					<string>^Health\: (\d+)\/(\d+)</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>7</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Defence List</name>
				<script>defs = {}</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>7</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>---------------------------------&lt; Defenses &gt;----------------------------------</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>2</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Stim jector</name>
					<script>defs.stimjector = true</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Stimjector</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>End on Prompt</name>
					<script>setTriggerStayOpen('Defence List', 0)
raiseEvent('got def')</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string></string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>7</integer>
					</regexCodePropertyList>
				</Trigger>
			</Trigger>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Wares Linkifier</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>900</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>-----------------------------------&lt; Wares &gt;-----------------------------------</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>3</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Capture</name>
					<script>local id = matches[2]
selectCaptureGroup(2)
setUnderline(true)
if tmp.shopname then
  local cmd = [[send("tt inspect %s from %s")]] % {id, tmp.shopname}
  setLink(cmd, 'Click to browse shop.')
end
resetFormat()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(.+?)\s+.+?\s+\d+$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>End on prompt</name>
					<script>setTriggerStayOpen('Wares Linkifier', 0)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string></string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>7</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>WW Regen</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Wetwiring Health Check</name>
					<script>raiseEvent('pvp event fired', 'wwregen prompt')
if getclass() == 'beast' then
	if stats.pchp &gt; 85 then
		beast.hunt()
	end
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string></string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>7</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Regen starting</name>
					<script>prompt.channelling = 'ww regenerate'
raiseEvent('pvp event fired', 'wwregen begins')
enableTrigger('Wetwiring Health Check')</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>[Mindsim]: Wetwiring regeneration starting.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>WW Regen ended</name>
					<script>prompt.channelling = false
raiseEvent('pvp event fired', 'wwregen ended')
disableTrigger('Wetwiring Health Check')
wwregenqueued = false</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>As you move, your wetwiring ceases regenerating your systems.</string>
						<string>Your wetwiring resumes its normal operation as your subsystems are fully healed.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>On Login</name>
				<script>expandAlias('class switch')

tempTimer(2, function() GUIframe.loadSettings() end )</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>Last login was from:</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>2</integer>
				</regexCodePropertyList>
			</Trigger>
		</TriggerGroup>
	</TriggerPackage>
	<TimerPackage />
	<AliasPackage>
		<Alias isActive="yes" isFolder="no">
			<name>anitimer demo</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex>^anitimer demo$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>abtn</name>
			<script>abtncontainer = Geyser.Container:new({
	name = 'abtncontainer',
	x = 400, y = 100,
	width = '40%', height = '15%',
	})

local css0 = [[
	background-color: rgba(0,0,0,0);
	foreground-color: rgb(200,100,100);
	border-style: solid;
	border-color: DimGrey;
	border-width: 2px;
	border-radius: 2px;
	margin: 5px;
]]
local css1 = [[
	background-color: rgba(50,30,0,0);
	foreground-color: rgb(200,100,100);
	border-style: solid;
	border-color: sienna;
	border-width: 2px;
	border-radius: 2px;
	margin: 5px;
]]

testbtn = abtn:new({
	name = 'testbtn',
	x = 0, y = 0,
	width = '25%', height = '100%',
	onclickalias = 'abtn pressed and this is the eventual alias run',
	cssState0 = css0,
	cssState1 = css1,
	msg0 = 'Press to&lt;br&gt;toggle on',
	msg1 = 'Press to&lt;br&gt;toggle off',
}, abtncontainer)</script>
			<command></command>
			<packageName></packageName>
			<regex>^abtn test$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>Do Repeat</name>
			<script>local amt = tonumber(matches[2])
local action = matches[3]

if dorepeatTrigger then killTrigger(dorepeatTrigger) end

expandAlias(action)

if amt &gt; 1 then 
	dorepeatTrigger = tempTrigger("You have recovered your balance.", function() expandAlias(action) end, amt-1)
end</script>
			<command></command>
			<packageName></packageName>
			<regex>^dor (\d+) (.+)$</regex>
		</Alias>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Sandbox</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Armour Tracking</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Armour List - Alternate</name>
					<script>--display(atable.order)
local filler = lab.calcFiller
local heading = '-'
local leader = heading:rep(2) .. ' '
local cols = {
	h = 'SteelBlue',
	t = 'cyan',
	d = 'LightGray',
	br = 'LightSkyBlue',
	l = 'lavender',
}
local width = 100
local resorder = {'impact', 'em', 'thermal', 'cellular', 'mental', 'draining', 'electric'}

local enclose = function(text,maxw)
	return string.format('&lt;%s&gt;|&lt;%s&gt;%s%s&lt;%s&gt;|', cols.br, cols.d, text, text:fillto(maxw), cols.br)
end



---------------------------------------------
cecho('\n&lt;%s&gt;%s' %{cols.h, heading:rep(100)})


for _,slot in ipairs(atable.order) do
	local s = '\n'
	s = string.format('%s&lt;%s&gt;%s ',s, cols.t, slot:upper())
	s = s .. slot:fillto(7, '-')
	s = string.format('%s%s', s, enclose('L',2))
	s = s .. ' '
	s = string.format('%s&lt;%s&gt;%s &lt;%s&gt;Description &lt;%s&gt;%s',s, cols.h, heading:rep(12), cols.d, cols.h, heading:rep(10))

	--heading for resistances
	for _,resname in ipairs(resorder) do
		cecho('&lt;%s&gt;|&lt;%s&gt;%s%s' %{cols.br,cols.h,resname:cut(5), filler(resname:cut(5), 5, ' ')})
	end
	cecho('&lt;%s&gt;|&lt;%s&gt;%s' %{cols.br, cols.h, heading:rep(7)})	
		
	

	
	
	cecho(s)
end
	</script>
					<command></command>
					<packageName></packageName>
					<regex>^alist2$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Armour List - Expanded</name>
					<script>--display(atable.order)
local filler = lab.calcFiller
local heading = '-'
local leader = heading:rep(2) .. ' '
local cols = {
	h = 'SteelBlue',
	t = 'cyan',
	d = 'LightGray',
	w = 'DarkSalmon',
	br = 'LightSkyBlue',
	l = 'lavender',
	
}

local resorder = {'impact', 'em', 'thermal', 'cellular', 'mental', 'draining', 'electric'}


cecho('\n&lt;%s&gt;%s' %{cols.h, heading:rep(100)})


for _,slot in ipairs(atable.order) do
	cecho('\n\n&lt;%s&gt;%s &lt;%s&gt;%s&lt;%s&gt;|&lt;%s&gt;L &lt;%s&gt;|&lt;%s&gt;%s' %{
		cols.t, 
		slot:upper(),
		cols.h,
		filler(slot, 7, '-'),
		cols.br,
		cols.h,
		cols.br,
		cols.h,
		string.rep('-', 38)
		}
	)
	--heading for resistances
	for _,resname in ipairs(resorder) do
		cecho('&lt;%s&gt;|&lt;%s&gt;%s%s' %{cols.br,cols.h,resname:cut(2), filler(resname:cut(2), 2, ' ')})
	end
	cecho('&lt;%s&gt;|&lt;%s&gt;%s' %{cols.br, cols.h, heading:rep(28)})

	-- summarise worn armour piece in a line
		-- display raw info
		local desc = atable.worn[slot].desc:cut(35)
		cecho('\n&lt;%s&gt;%s%s&lt;%s&gt;|&lt;%s&gt;%s%s&lt;%s&gt;|&lt;%s&gt;%s%s%s' %{
			cols.w, 
			atable.worn[slot].id, 
			filler(atable.worn[slot].id, 8, ' '),
			cols.br,
			cols.w, 
			atable.worn[slot].lvl,
			filler(atable.worn[slot].lvl,2,' '),
			cols.br,
			cols.w,
			'  ',
			desc,
			filler(desc, 36, ' '),
			}
		)
		
		-- lets add the resistances
		local resorder = {'impact', 'em', 'thermal', 'cellular', 'mental', 'draining', 'electric'}
		for _,resname in ipairs(resorder) do
			local resval = tostring(math.floor(atable.worn[slot][resname] + 0.5))
			cecho('&lt;%s&gt;|&lt;%s&gt;%s%s' %{
				cols.br, 
				cols.w, 
				resval,
				resval:fillto(2)
				}
			)
		end
		
		cecho('&lt;%s&gt;|' %{cols.br})	
		
				-- display item health as clickable link to repair
		local cmd = string.format([[send('repair %s')]], atable.worn[slot].id)
		local ihp = tostring(atable.worn[slot].health)
    local s = ' &lt;%s&gt;[&lt;%s&gt;H:%s&lt;%s&gt;%s]' %{cols.br, cols.l, ihp,cols.br, ihp:fillto(3)}
    local tooltip = 'Click to repair: %s' %{cmd}
    cechoLink(s, cmd, tooltip, true)
		
		-- COMPARE
		cmd = string.format([[send('compare %s')]], atable.worn[slot].id)
    s = ' &lt;%s&gt;[&lt;%s&gt;C&lt;%s&gt;]' %{cols.br, cols.l, cols.br}
    tooltip = 'Click to compare: %s' %{cmd}
    cechoLink(s, cmd, tooltip, true)		
		
		-- Junk
		cmd = string.format([[send('junk scrap %s')]], atable.worn[slot].id)
    s = ' &lt;%s&gt;[&lt;%s&gt;J&lt;%s&gt;]' %{cols.br, cols.l, cols.br}
    tooltip = 'Click to junk: %s' %{cmd}
    cechoLink(s, cmd, tooltip, true)	
		
		
		
		
		
		
		
		
		
		
		
		
		

	-- summarise each armour piece in a single line
	for id,details in pairs(atable[slot]) do
	
		-- display raw info
		cecho('\n&lt;%s&gt;%s%s&lt;%s&gt;|&lt;%s&gt;%s%s&lt;%s&gt;|&lt;%s&gt;%s%s%s' %{
			cols.d, 
			id, 
			filler(id, 8, ' '),
			cols.br,
			cols.d, 
			details.lvl,
			filler(details.lvl,2,' '),
			cols.br,
			cols.d,
			'  ',
			details.desc:cut(35),
			filler(details.desc:cut(35), 36, ' '),
			}
		)
		
		-- lets add the resistances
		local resorder = {'impact', 'em', 'thermal', 'cellular', 'mental', 'draining', 'electric'}
		for _,resname in ipairs(resorder) do
			local resval = tostring(math.floor(details[resname] + 0.5))
			cecho('&lt;%s&gt;|&lt;%s&gt;%s%s' %{
				cols.br, 
				cols.d, 
				resval,
				resval:fillto(2)
				}
			)
		end
		cecho('&lt;%s&gt;|' %{cols.br})
		
			
			

		
		
		
		-- display item health as clickable link to repair
		local cmd = string.format([[send('repair %s')]], id)
		ihp = tostring(details.health)
    local s = ' &lt;%s&gt;[&lt;%s&gt;H:%s%s&lt;%s&gt;]' %{cols.br, cols.l, ihp, ihp:fillto(3),cols.br}
    local tooltip = 'Click to repair: %s' %{cmd}
    cechoLink(s, cmd, tooltip, true)
		
		-- COMPARE
		cmd = string.format([[send('compare %s')]], id)
    s = ' &lt;%s&gt;[&lt;%s&gt;C&lt;%s&gt;]' %{cols.br, cols.l, cols.br}
    tooltip = 'Click to compare: %s' %{cmd}
    cechoLink(s, cmd, tooltip, true)		
	

	
		
		-- Junk
		cmd = string.format([[send('junk scrap %s')]], id)
    s = ' &lt;%s&gt;[&lt;%s&gt;J&lt;%s&gt;]' %{cols.br, cols.l, cols.br}
    tooltip = 'Click to junk: %s' %{cmd}
    cechoLink(s, cmd, tooltip, true)	


			-- WEAR IT
		cmd = string.format([[send('armor upgrade %s with %s')]], slot, id)
    s = ' &lt;%s&gt;[&lt;%s&gt;W&lt;%s&gt;]' %{cols.br, cols.l, cols.br}
    tooltip = 'Click to wear it: %s' %{cmd}
    cechoLink(s, cmd, tooltip, true)

		
		-- Stock it!
		cmd = string.format([[shopsys.stock('%s')]], id)
    s = ' &lt;%s&gt;[&lt;%s&gt;S&lt;%s&gt;]' %{cols.br, cols.l, cols.br}
    tooltip = 'Click to stock: %s' %{cmd}
    cechoLink(s, cmd, tooltip, true)	

	end --loop through slot

	
	
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^alist$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>II weapon</name>
					<script>send('armour list inv')
send('armour list')
</script>
					<command></command>
					<packageName></packageName>
					<regex>^iiarmour$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>armour  List</name>
					<script>armour.showall()</script>
					<command></command>
					<packageName></packageName>
					<regex>^armours$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Weapon Tracking</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>II weapon</name>
					<script>local class = getclass()
if class == 'beast' then
	enableTrigger('Weapon List All')
else 
	enableTrigger('II Weapon')
end
send('ii weapon')


if class == 'beast' then
	enableTrigger('MWP Slot Gate')
  send('mwp list')
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^iiweap$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Weapon List</name>
					<script>weaponry.showall()</script>
					<command></command>
					<packageName></packageName>
					<regex>^weaps$</regex>
				</Alias>
			</AliasGroup>
		</AliasGroup>
		<Alias isActive="yes" isFolder="no">
			<name>guiframe save/load</name>
			<script>local mode = matches[2]
GUIframe[mode .. 'Settings']()</script>
			<command></command>
			<packageName></packageName>
			<regex>^guif (save|load)$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>Debug on/off</name>
			<script>local mode = matches[2]
if mode == 'on' then
	debugging = true
else
debugging = false
end</script>
			<command></command>
			<packageName></packageName>
			<regex>^deb(on|off)$</regex>
		</Alias>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Toolbox</name>
			<packageName></packageName>
			<script>
function str(s)
	return tostring(s)
end

function int(s)
	return tonumber(s)
end

	topercent = function(num)
		return tostring(num) .. '%'
	end
	frompercent = function(pc)
		return tonumber(string.sub(pc, 1, -2))
	end

function mathpercent(pc, operator, operand)
	local pc = frompercent(pc)
	local operand = operand
	if type(operand) == 'string' then operand = frompercent(operand) end
	local result = 0
	
	if operator == '*' then
		result = pc * operand
	elseif operator == '/' then
		result = pc / operand
	elseif operator == '+' then
		result = pc + operand
	elseif operator == '-' then
		result = pc - operand
	end
	
	return topercent(result)

end





--[[


		
	
]]--</script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>guiframe</name>
				<packageName></packageName>
				<script>-- Jor'Mox's GUIframe Script
-- 3/07/2019
-- v1.4.2

-- To resize frames or move tabs, right click and drag either the resize label or the tab
-- until the desired result is achieved.

-- To add a window to a frame for the script to manage, use the
-- GUIframe.addWindow(window, name, container, hideText) function, where the window
-- variable contains the Geyser object you want to add, the name variable contains
-- the name you want it to be referred to as, which also is used as the text printed
-- on the associated tab that is created, the container variable is a string containing
-- one of the following: bottom, top, topleft, topright, bottomleft, bottomright,
-- and the hideText variable is an optional boolean which, if true, prevents text being
-- written on the tab for this window.

-- To remove a window from GUIframe, use the GUIframe.removeWindow(name, container)
-- function, where the name variable is the same name you gave the window when adding it,
-- and the optional container variable is a string specifying which container to remove
-- the window from. If no container is specified, the window is removed regardless of
-- which container it is in.

-- Resizing of frames can be enabled or disabled using the GUIframe.enable(side) and
-- GUIframe.disable(side, hide) functions respectively. If the second argument to
-- GUIframe.disable is false, then the entire set of frames on that side is hidden, and
-- the border is adjusted as if that side had be resized to zero.

-- To save and load settings, use the GUIframe.saveSettings() and
-- GUIframe.loadSettings(redraw) functions. If the redraw argument is true, the border
-- background color is changed to black to force the area of the borders to be redrawn.
-- Additionally, the GUIframe.reinitialize() function can be used to force the script to
-- initialize itself again, going back to default settings.

-- To activate a tab without it being clicked, use the GUIframe.activate(name) function.
-- And to apply a stylesheet to a tab that is different from the default stylesheet, use
-- the GUIframe.styleTab(name, style) function, where the style variable contains a string
-- with the CSS to be applied. Since tabs are styled only when created or when this
-- function is used, there should be no concern with this styling being overwritten.

GUIframe = GUIframe or {}

local mainW, mainH = getMainWindowSize()
local halfW, halfH = math.floor(mainW/2), math.floor(mainH/2)

GUIframe.configs = GUIframe.configs or {}

GUIframe.defaults = {
    tabHeight = 20,
    tabHeight = 20,
    tabStyle = [[
        background-color: rgba(150,150,150,100);
        border-width: 2px;
        border-style: outset;
        border-color: rgba(50,50,50,200);
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
        margin-right: 1px;
        margin-left: 1px;
        qproperty-alignment: 'AlignCenter | AlignCenter';]],
    tabEchoStyle = '&lt;center&gt;&lt;p style="font-size:14px; color = white"&gt;',
    leftStartWidth = 50,
    leftStartHeight = halfH,
    rightStartWidth = 50,
    rightStartHeight = halfH,
    topStartHeight = 50,
    bottomStartHeight = 50,
    resizeHeight = 30,
    resizeWidth = 30,
    resizeHoverImage = "/imgs/blue_arrows.png",
    resizeRestImage = "/imgs/blue_arrows_30t.png",
    borderOffset = 5,
}

GUIframe.windows = GUIframe.windows or {}
GUIframe.tabs = GUIframe.tabs or {}
GUIframe.tabCoords = GUIframe.tabCoords or {}
GUIframe.sides = GUIframe.sides or {left = 'enabled', right = 'enabled', top = 'enabled', bottom = 'enabled'}

local resize_style = "border-image: url(%s%s);"

local configs = table.update(GUIframe.defaults, GUIframe.configs)
local tabsInfo, containerInfo, resizeInfo

local container_names = {'topLeftContainer', 'bottomLeftContainer', 'topRightContainer',
    'bottomRightContainer', 'bottomContainer', 'topContainer'}
local tab_names = {'topLeftTabs', 'topRightTabs', 'bottomLeftTabs', 'bottomRightTabs'}
local resizeLabels = {'resizeLeft', 'resizeRight', 'resizeTop', 'resizeBottom'}
local sides = {"top","bottom","left","right"}
local side_containers = {
    left = {"topLeftContainer","bottomLeftContainer","topLeftTabs","bottomLeftTabs"},
    right = {"topRightContainer","bottomRightContainer","topRightTabs","bottomRightTabs"},
    top = {"topContainer"},
    bottom = {"bottomContainer"}
}

local function get_window_coords(win, update) -- gets coords for window, stores data in tabCoords table as needed
    local x, y = win:get_x(), win:get_y()
    local w, h = win:get_width(), win:get_height()
    if update then
        GUIframe.tabCoords[win.name]  = {x = x, y = y, w = w, h = h}
    end
    return x, y, w, h
end

local function check_overlap(tab, x, y) -- checks to see if given coords overlap tab or tab container
    if type(tab) == "string" then tab = GUIframe[tab] or GUIframe.tabs[tab] end
    if tab.hidden or tab.auto_hidden then return false end
    local info = GUIframe.tabCoords[tab.name]
    local x1, y1 = info.x, info.y
    local x2, y2 = x1 + info.w, y1 + info.h
    return (x &gt;= x1 and x &lt;= x2 and y &gt;= y1 and y &lt;= y2)
end

local function update_tab(tab, x, y, w, h) -- resizes and moves tab and updates tab coords table
    tab:move(x, y)
    tab:resize(w,h)
    local info = GUIframe.tabCoords[tab.name] or {}
    info.x, info.y = tab:get_x(), tab:get_y()
    info.w, info.h = tab:get_width(), tab:get_height()
    if table.contains(tab_names, tab.name) then
        info.container = true
    end
    GUIframe.tabCoords[tab.name] = info
end

local function get_containers(pos)
    if type(pos) == "table" then pos = pos.name end
    for _,w in ipairs({'right','left','container','tabs'}) do
        pos = pos:gsub(w,w:title())
    end
    local con, tab
    if string.find(pos,"Container") then
        con = GUIframe[pos]
        if not con then return end
        tabs = con.tabs
    elseif string.find(pos,"Tabs") then
        tabs = GUIframe[pos]
        if not tab then return end
        con = tabs.con
    else
        con = GUIframe[pos.."Container"]
        tabs = GUIframe[pos.."Tabs"]
    end
    return con, tabs
end

local function config()
    configs = table.update(GUIframe.defaults, GUIframe.configs)
    GUIframe.windows = {}
    GUIframe.tabCoords = {}

    tabsInfo = {
        topLeftTabs = {name = 'topLeftTabs', x = 0, y = 0, width = configs.leftStartWidth,
            height = configs.tabHeight},
        bottomLeftTabs = {name = 'bottomLeftTabs', x = 0, y = configs.leftStartHeight,
            width = configs.leftStartWidth, height = configs.tabHeight},
        topRightTabs = {name = 'topRightTabs', x = mainW - configs.rightStartWidth, y = 0,
            width = configs.rightStartWidth, height = configs.tabHeight},
        bottomRightTabs = {name = 'bottomRightTabs', x = mainW - configs.rightStartWidth,
            y = configs.rightStartHeight, width = configs.rightStartWidth, height = configs.tabHeight},
    }
    containerInfo = {
        topLeftContainer = {name = 'topLeftContainer', x = 0, y = configs.tabHeight,
            width = configs.leftStartWidth, height = configs.leftStartHeight - configs.tabHeight},
        bottomLeftContainer = {name = 'bottomLeftContainer', x = 0, y = configs.leftStartHeight + configs.tabHeight,
            width = configs.leftStartWidth, height = configs.leftStartHeight - configs.tabHeight},
        topRightContainer = {name = 'topRightContainer', x = mainW - configs.rightStartWidth,
            y = configs.tabHeight, width = configs.rightStartWidth,
            height = configs.rightStartHeight - configs.tabHeight},
        bottomRightContainer = {name = 'bottomRightContainer', x = mainW - configs.rightStartWidth,
            y = configs.rightStartHeight + configs.tabHeight, width = configs.rightStartWidth,
            height = configs.rightStartHeight - configs.tabHeight},
        bottomContainer = {name = 'bottomContainer', x = configs.leftStartWidth,
            y = mainH - configs.bottomStartHeight, height = configs.bottomStartHeight,
            width = mainW - configs.leftStartWidth - configs.rightStartWidth},
        topContainer = {name = 'topContainer', x = configs.leftStartWidth, y = 0, height = configs.topStartHeight,
            width = mainW - configs.leftStartWidth - configs.rightStartWidth}
    }
    resizeInfo = {
        resizeLeft = {name = 'resizeLeft', x = configs.leftStartWidth,
            y = configs.leftStartHeight - configs.resizeHeight / 2, height = configs.resizeHeight,
            width = configs.resizeWidth},
        resizeRight = {name = 'resizeRight', x = configs.rightStartWidth - configs.resizeWidth,
            y = configs.rightStartHeight - configs.resizeHeight / 2, height = configs.resizeHeight,
            width = configs.resizeWidth},
        resizeTop = {name = 'resizeTop', x = halfW - configs.resizeWidth / 2,
            y = configs.topStartHeight, height = configs.resizeHeight, width = configs.resizeWidth},
        resizeBottom = {name = 'resizeBottom', x = halfW - configs.resizeWidth / 2,
            y = mainH - configs.bottomStartHeight - configs.resizeHeight, height = configs.resizeHeight,
            width = configs.resizeWidth}
    }

    for name, cons in pairs(containerInfo) do
        GUIframe[name] = Geyser.Container:new(cons)
    end
    for name, cons in pairs(tabsInfo) do
        GUIframe[name] = Geyser.Container:new(cons)
        local cname = name:gsub("Tabs","Container")
        GUIframe[cname].tabs = GUIframe[name]
        GUIframe[name].con = GUIframe[cname]
    end
    local style = resize_style
    local path = getMudletHomeDir()
    path = path:gsub("[\\/]","/")
    configs.resizeRestImage = configs.resizeRestImage:gsub("[\\/]","/")
    configs.resizeHoverImage = configs.resizeHoverImage:gsub("[\\/]","/")
    local no_image
    if not (io.exists(path .. configs.resizeHoverImage) and io.exists(path .. configs.resizeRestImage)) then
        debugc("GUIframe: config: resize image(s) not found")
        path = "255,20,147,"
        style = "background-color: rgba(%s%s);"
        no_image = true
    end

    for name, cons in pairs(resizeInfo) do
        GUIframe[name] = Geyser.Label:new(cons)
        GUIframe[name]:setColor(0,0,0,0)
        GUIframe[name]:setStyleSheet(string.format(style, path, (no_image and "100") or configs.resizeRestImage))
        GUIframe[name]:setOnEnter("GUIframe."..name..".setStyleSheet", GUIframe[name],
            string.format(style, path, (no_image and "255") or configs.resizeHoverImage))
        GUIframe[name]:setOnLeave("GUIframe."..name..".setStyleSheet", GUIframe[name],
            string.format(style, path, (no_image and "100") or configs.resizeRestImage))
        GUIframe[name]:setClickCallback("GUIframe.buttonClick", name)
        GUIframe[name]:setReleaseCallback("GUIframe.buttonRelease", name)
        GUIframe[name]:setMoveCallback("GUIframe.buttonMove", name)
    end
    setBorderLeft(configs.leftStartWidth + configs.borderOffset)
    setBorderRight(configs.rightStartWidth + configs.borderOffset)
    setBorderTop(configs.topStartHeight + configs.borderOffset)
    setBorderBottom(configs.bottomStartHeight + configs.borderOffset)
    GUIframe.initialized = true
end

local function deselectContainer(container, tabs)
    -- hide all windows in container
    for _, win in pairs(container.windowList) do
        win:hide()
        win.active = false
    end
    -- unhighlight all tabs in tabs container
    if tabs then
        for _, tab in pairs(tabs.windowList) do
            local name = tab.name:gsub("Tab","")
            local show = GUIframe.windows[name].showText
            if show then
                tab:echo(configs.tabEchoStyle..name)
            end
	    end
	end
end

local function adjustTabs(tabs)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    -- remove duplicated window names
    local found = {}
    for k,v in ipairs(tabs.windows) do
        if not table.contains(found,v) and tabs.windowList[v] and not tabs.windowList[v].isClicked then
            table.insert(found,v)
        end
    end
    -- calculate tab width and set height
    local w, h = math.floor(100 / #tabs.windows), configs.tabHeight
    local function wrap(num) return tostring(num) .. "%" end
    -- resize and reposition all tabs
    local shown, first
    for k,v in ipairs(found) do
        local tab = tabs.windowList[v]
        if not first then first = v:gsub("Tab","") end
        if not shown and tab.active then
            shown = v
        elseif tab.active then
            tab.active = false
        end
        update_tab(tab, wrap(w * (k-1)), 0, wrap(w), h)
    end
    if first and not shown and GUIframe.windows[first] then GUIframe.windows[first]:show() end
    tabs.space_pos = nil
end

local function reorderTabs(tabs, name, pos)
    local windows = tabs.windows
    while table.contains(windows, name) do
        table.remove(windows, table.index_of(windows, name))
    end
    table.insert(windows, pos, name)
end

local function makeSpace(tabs, tab, pos)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    local windows = table.deepcopy(tabs.windows)
    local space_pos = tabs.space_pos
    local tab_pos = table.index_of(windows, tab.name)
    -- calculate tab width and set height
    local num_tabs = #windows + 1
    if tab_pos then
        num_tabs = num_tabs - 1
        if pos &gt; tab_pos then pos = pos - 1 end
        if pos == space_pos then pos = pos + 1 end
    elseif space_pos and pos &gt;= space_pos then
        pos = pos + 1
    end
    local w, h = math.floor(100 / num_tabs), configs.tabHeight
    local function wrap(num) return tostring(num) .. "%" end
    -- resize and reposition all tabs
    if tab_pos then table.remove(windows,tab_pos) end
    for k,v in ipairs(windows) do
        if k &gt;= pos then
            update_tab(tabs.windowList[v], wrap(w * k), 0, wrap(w), h)
        else
            update_tab(tabs.windowList[v], wrap(w * (k-1)), 0, wrap(w), h)
        end
    end
    tabs.space_pos = pos
end

local function round(num,roundTo)
	local b, r = math.modf(num/roundTo)
	if r &gt;= 0.5 then
		b = b + 1
	end
	return b * roundTo
end

local function setBorder(side, val)
    local funcs = {left = setBorderLeft, right = setBorderRight, top = setBorderTop, bottom = setBorderBottom}
    val = math.max(val,0)
	funcs[side](val)
end

local function resizeContainers(side, w, h)
    if table.contains({"left", "right"}, side) then
        local info = {
            left = {resize = "resizeLeft", cons = {"topLeftContainer","bottomLeftContainer"},
                tabs = {"topLeftTabs","bottomLeftTabs"}, x = 0, w = w},
            right = {resize = "resizeRight", cons = {"topRightContainer","bottomRightContainer"},
                tabs = {"topRightTabs","bottomRightTabs"}, x = w, w = mainW - w}
        }
        info = info[side]
        -- move and resize top, bottom and tab containers
        update_tab(GUIframe[info.tabs[1]], info.x, 0, info.w, configs.tabHeight)
        update_tab(GUIframe[info.tabs[2]], info.x, h, info.w, configs.tabHeight)
        GUIframe[info.cons[1]]:resize(info.w, h - configs.tabHeight)
        GUIframe[info.cons[1]]:move(info.x, configs.tabHeight)
        GUIframe[info.cons[2]]:resize(info.w, mainH - h - configs.tabHeight)
        GUIframe[info.cons[2]]:move(info.x, h + configs.tabHeight)
        -- adjust border size
        setBorder(side, info.w + configs.borderOffset)

        -- adjust width of top and bottom containers
        local x, y
        x = (GUIframe.sides.left ~= "hidden" and GUIframe.topLeftContainer:get_width()) or 0
        w = ((GUIframe.sides.right ~= "hidden" and GUIframe.topRightContainer:get_x()) or mainW) - x
        for _, con in ipairs({GUIframe.topContainer, GUIframe.bottomContainer}) do
            y, h = con:get_y(), con:get_height()
            con:resize(w, h)
            con:move(x, y)
        end
    elseif table.contains({"top", "bottom"}, side) then
        local x = 0
        w = mainW
        if GUIframe.sides.left ~= "hidden" then
            w = w - GUIframe.topLeftContainer:get_width()
            x = GUIframe.topLeftContainer:get_width()
        end
        if GUIframe.sides.right ~= "hidden" then w = w - GUIframe.topRightContainer:get_width() end
        local info = {top = {con = "topContainer", y = 0, h = h}, bottom = {con = "bottomContainer", y = h, h = mainH - h}}
        local con = GUIframe[info[side].con]
        con:resize(w, info[side].h)
        con:move(x, info[side].y)
        setBorder(side, info[side].h + configs.borderOffset)
    end
end

local function refresh()
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    mainW, mainH = getMainWindowSize()
    local rH, rW = configs.resizeHeight, configs.resizeWidth
    local x, y, w
    -- adjust bottom left and right container heights
    for _, C in ipairs({GUIframe.bottomLeftContainer, GUIframe.bottomRightContainer}) do
        C:resize(C:get_width(), mainH - C:get_y())
    end
    -- reposition right containers
    w = GUIframe.topRightContainer:get_width()
    for _, C in ipairs({GUIframe.topRightContainer, GUIframe.topRightTabs,
        GUIframe.bottomRightContainer, GUIframe.bottomRightTabs}) do
        C:move(mainW - w,C:get_y())
    end
    -- resize and reposition bottom and top containers
    w, x = mainW, 0
    if GUIframe.sides.left ~= "hidden" then
        w = w - GUIframe.topLeftContainer:get_width()
        x = GUIframe.topLeftContainer:get_width()
    end
    if GUIframe.sides.right ~= "hidden" then w = w - GUIframe.topRightContainer:get_width() end
    for _, C in ipairs({GUIframe.topContainer, GUIframe.bottomContainer}) do
        C:resize(w, C:get_height())
        C:move(x, C.name == "topContainer" and 0 or mainH - C:get_height())
    end
    -- reposition resize labels
    x, y = GUIframe.topLeftContainer:get_width(), GUIframe.bottomLeftTabs:get_y()
    GUIframe.resizeLeft:move(x, y - rH / 2)
    x, y = GUIframe.topRightContainer:get_x(), GUIframe.bottomRightTabs:get_y()
    GUIframe.resizeRight:move(x - rW, y - rH / 2)
    x = (GUIframe.topContainer:get_width() - rW) / 2
    if GUIframe.sides.left ~= "hidden" then x = x + GUIframe.topLeftContainer:get_width() end
    y = GUIframe.topContainer:get_height()
    GUIframe.resizeTop:move(x, y)
    y = GUIframe.bottomContainer:get_y()
    GUIframe.resizeBottom:move(x, y - rH)
end

-- enables the resize label for the given side and shows all associated containers if hidden
function GUIframe.enable(side)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    if not table.contains(sides,side) then error("GUIframe.enable: invalid side",2) end
    local cons = side_containers[side]
    for _, con in ipairs(cons) do
        GUIframe[con]:show()
        for _,win in pairs(GUIframe[con].windowList) do -- loop can be removed after Geyser fix comes in
            if win.active then win:show() end
        end
    end
    if table.contains({"left","right"}, side) then
        setBorder(side, GUIframe[cons[1]]:get_width() + configs.borderOffset)
    else
        setBorder(side, GUIframe[cons[1]]:get_height() + configs.borderOffset)
    end
    GUIframe["resize"..side:title()]:show()
    GUIframe.sides[side] = "enabled"
    refresh()
end

-- disables and hides the resize label for the given side, and hides all associated containers if indicated
function GUIframe.disable(side, hide)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    if not table.contains(sides,side) then error("GUIframe.disable: invalid side",2) end
    local cons = side_containers[side]
    GUIframe.sides[side] = "disabled"
    if hide then
        for _, con in ipairs(cons) do
            GUIframe[con]:hide()
            for _, win in pairs(GUIframe[con].windowList) do -- loop can be removed after Geyser fix comes in
                if win.type == "mapper" then win:hide() end
            end
        end
        local border = _G["setBorder"..side:title()]
        border(0)
        GUIframe.sides[side] = "hidden"
    end
    GUIframe["resize"..side:title()]:hide()
    refresh()
end

-- adds a Geyser window or container to the given container, with a tab showing the given name if applicable
function GUIframe.addWindow(window, name, container, hideText)
    if not GUIframe.initialized then config() end
    if type(container) == "table" then container = container.name end
    local con, tabs = get_containers(container)
    if not con then error("GUIframe.addWindow: invalid container name",2) end
    if not name then error("GUIframe.addWindow: name argument required",2) end
    -- remove window from any containers
    for _, tcon in ipairs(container_names) do
        if table.contains(GUIframe[tcon].windows, window.name) then
            GUIframe.removeWindow(name, tcon)
        end
    end
    deselectContainer(con,tabs)
    -- add tab for window, if applicable
    if tabs then
        local showText = not hideText
        window.showText = showText
        local lbl = Geyser.Label:new({name = name.."Tab", x = 0, y = 0, width = 10, height = 10},tabs)
        lbl:setStyleSheet(configs.tabStyle)
        if showText then
            lbl:echo(configs.tabEchoStyle.."&lt;b&gt;"..name)
        end
        lbl:setClickCallback("GUIframe.buttonClick", name)
        lbl:setReleaseCallback("GUIframe.buttonRelease", name)
        lbl:setMoveCallback("GUIframe.buttonMove", name)
        GUIframe.tabs[name] = lbl
        adjustTabs(tabs)
    end
    -- add window to container and set size and position
    con:add(window)
    window:resize("100%","100%")
    window:move(0,0)
    window:show()
    GUIframe.windows[name] = window
	raiseEvent("sysWindowResizeEvent")
end

-- removes a named Geyser window or container from the named container (using name given in GUIframe.addWindow)
function GUIframe.removeWindow(name, container)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    if not container then container = GUIframe.windows[name].container end
    local con, tabs = get_containers(container)

    if not con or not table.contains(container_names, con.name) then
        error("GUIframe.removeWindow: invalid container name",2)
    end
    if not name then error("GUIframe.removeWindow: name argument required",2) end
    if tabs then
        local lbl = tabs.windowList[name.."Tab"]
        if lbl then
            tabs:remove(lbl)
            adjustTabs(tabs)
            lbl:hide()
        end
    end
    local window = GUIframe.windows[name]
    con:remove(window)
    window:hide()
end

-- saves the current GUI setup, including the size of the different containers and what windows go in which container
function GUIframe.saveSettings()
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    local saveTbl = {}
    local w, h = GUIframe.topLeftContainer:get_width(), GUIframe.bottomLeftTabs:get_y()
    saveTbl.left = {w = w, h = h}
    w, h = GUIframe.topRightContainer:get_width(), GUIframe.bottomRightTabs:get_y()
    saveTbl.right = {w = w, h = h}
    w, h = GUIframe.topContainer:get_width(), GUIframe.topContainer:get_height()
    saveTbl.top = {w = w, h = h}
    w, h = GUIframe.bottomContainer:get_width(), GUIframe.bottomContainer:get_height()
    saveTbl.bottom = {w = w, h = h}

    -- get added windows and containers they are assigned to
    local windows = {}
    local text = {}
    for k,v in pairs(GUIframe.windows) do
        local con = v.container.name
        windows[con] = windows[con] or {}
        table.insert(windows[con], k)
        text[con] = text[con] or {}
        text[con][k] = v.showText
    end
    -- reorder windows to match tab order for tabbed containers
    for con, wins in pairs(windows) do
        if con:find("Left") or con:find("Right") then
            local tabs = GUIframe[con].tabs.windows
            local new = {}
            for k,v in ipairs(tabs) do
                local wname = v:gsub("Tab","")
                table.insert(new, {wname, text[con][wname]})
            end
            windows[con] = new
        end
    end
    saveTbl.windows = windows
    saveTbl.sides = GUIframe.sides
    table.save(getMudletHomeDir() .. "/GUIframeSave.lua", saveTbl)
end

-- loads GUI setup from a previous save
function GUIframe.loadSettings(redraw)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    local saveTbl = {}
    local path = getMudletHomeDir() .. "/GUIframeSave.lua"
    path = path:gsub("\\","/")
    mainW, mainH = getMainWindowSize()
    if not io.exists(path) then debugc("GUIframe.loadSettings: save file doesn't exist.") return end
    table.load(path, saveTbl)
    resizeContainers("left", saveTbl.left.w, saveTbl.left.h)
    resizeContainers("right", mainW - saveTbl.right.w, saveTbl.right.h)
    resizeContainers("top", saveTbl.top.w, saveTbl.top.h)
    resizeContainers("bottom", saveTbl.bottom.w, mainH - saveTbl.bottom.h)
    for con, wins in pairs(saveTbl.windows) do
        for _,name in ipairs(wins) do
            if type(name) == "string" then
                GUIframe.addWindow(GUIframe.windows[name], name, con)
            else
                local n, s = name[1], not name[2]
                GUIframe.addWindow(GUIframe.windows[n], n, con, s)
            end
        end
    end

    for side, state in pairs(saveTbl.sides) do
        if state == "enabled" then
            GUIframe.enable(side)
        elseif state == "disabled" then
            GUiframe.disable(side,false)
        elseif state == "hidden" then
            GUIframe.disable(side,true)
        end
    end
    -- force redraw of screen
    if redraw then
        setBackgroundColor(1,1,1)
        setBackgroundColor(0,0,0)
    end
end

-- can be called to force the script to run its config function again
function GUIframe.reinitialize()
    config()
end

-- can be called to activate a given tab without clicking on it
function GUIframe.activate(name)
    if not GUIframe.initialized then error("GUIframe not initialized",1) end
	local window = GUIframe.windows[name]
	if window then
        local con, tabs = get_containers(window.container.name)
        -- hide and unhighlight other windows and tabs
        deselectContainer(con, tabs)
        -- show selected window
        window:show()
        window.active = true
        -- highlight selected tab
        if window.showText then
            GUIframe.tabs[name]:echo(configs.tabEchoStyle.."&lt;b&gt;"..name)
        end
    end
end

-- can be called to apply a style to a given tab
function GUIframe.styleTab(name, style)
    if not GUIframe.initialized then error("GUIframe not initialized",1) end
	local tab = GUIframe.tabs[name]
	if tab then
	    tab:setStyleSheet(style)
    end
end

-- internally used function to handle button click callbacks
function GUIframe.buttonClick(name, event)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
	if table.contains(resizeLabels,name) then
	    if event.button == "RightButton" then
	        local lbl = GUIframe[name]
	        lbl.difX, lbl.difY = event.x, event.y
	        lbl.savedX, lbl.savedY = getMousePosition()
            GUIframe[name].isClicked = true
        end
	elseif event.button == "LeftButton" then
        local window = GUIframe.windows[name]
        local con, tabs = get_containers(window.container.name)
        -- hide and unhighlight other windows and tabs
        deselectContainer(con, tabs)
        -- show selected window
        window:show()
        window.active = true
        -- highlight selected tab
        if window.showText then
            GUIframe.tabs[name]:echo(configs.tabEchoStyle.."&lt;b&gt;"..name)
        end
    elseif event.button == "RightButton" then
        local window, tab = GUIframe.windows[name], GUIframe.tabs[name]
        tab.savedX, tab.savedY = getMousePosition()
        tab.difX, tab.difY, tab.isClicked = event.x, event.y, true
        -- force update of coords for all tabs and tab containers
        GUIframe.tabCoords = {}
        for _, name in ipairs(tab_names) do
            get_window_coords(GUIframe[name], true)
            for tname, tab in pairs(GUIframe[name].windowList) do
                get_window_coords(tab, true)
            end
        end
    end
    raiseEvent("GUIframe.buttonClick",name,event)
end

-- internally used function to handle button release callbacks
function GUIframe.buttonRelease(name, event)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
	if table.contains(resizeLabels,name) then
	    if event.button == "RightButton"  then
            local lbl = GUIframe[name]
            lbl.savedX, lbl.savedY, lbl.difX, lbl.difY, lbl.isClicked = nil, nil, nil, nil, false
        end
	elseif event.button == "RightButton" then
	    local window, tab = GUIframe.windows[name], GUIframe.tabs[name]
	    local con, tabs = get_containers(window.container.name)
	    tab.difX, tab.difY, tab.savedX, tab.savedY, tab.isClicked = nil, nil, nil, nil, false
	    hideWindow("show_container")
	    for _, tname in ipairs(tab_names) do
	        local info = GUIframe[tname]
	        if info.mouse_over then
	            local pos = info.space_pos
	            info.mouse_over = nil
	            GUIframe.addWindow(window, name, tname:gsub("Tabs",""), not window.showText)
	            if pos then
    	            reorderTabs(info, tab.name, pos)
    	            adjustTabs(info)
    	        end
	        end
	    end
	    adjustTabs(tabs)
	end
	raiseEvent("GUIframe.buttonRelease",name,event)
end

-- internally used function to handle button move callbacks
function GUIframe.buttonMove(name, event)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
	if table.contains(resizeLabels,name) then
	    lbl = GUIframe[name]
	    if lbl.isClicked then
	        local w, h = getMousePosition()
	        w, h = round(w - lbl.difX, 10), round(h - lbl.difY, 10)
            mainW, mainH = getMainWindowSize()
            local side, cW, cH, rX, rY
            local minX = GUIframe.sides.left ~= "hidden" and GUIframe.topLeftContainer:get_width() or 0
            local maxX = GUIframe.sides.right ~= "hidden" and GUIframe.topRightContainer:get_x() or mainW
            local minY = GUIframe.sides.top ~= "hidden" and GUIframe.topContainer:get_height() or 0
            local maxY = GUIframe.sides.left ~= "hidden" and GUIframe.bottomContainer:get_y() or mainH
            local mid, min, max = GUIframe.topContainer:get_width(), math.min, math.max
            local tabH, rH, rW = configs.tabHeight, configs.resizeHeight, configs.resizeWidth
	        w, h = max(w, 0), max(h, 0)
            local info = { -- specify position of resize labels and size of containers
                resizeLeft = {side = "left", x = min(w, maxX - rW),
                    y = min(max(h + rH / 2,tabH), mainH - tabH) - rH / 2,
                    w = min(w, maxX - rW), h = min(max(h + rH / 2,tabH), mainH-tabH) },
                resizeRight = {side = "right", x = min(max(w, minX), mainW),
                    y = min(max(h + rH / 2, tabH), mainH - tabH) - rH / 2,
                    w = min(max(w, minX), mainW - rW) + rW, h = min(max(h + rH / 2, tabH), mainH - tabH) },
                resizeTop = {side = "top", x = minX + (mid - rW) / 2,
                    y = min(h, maxY - rH), w = maxX - minX, h = min(h, maxY - rH) },
                resizeBottom = {side = "bottom", x = minX + (mid - rW) / 2,
                    y = min(max(h, minY) - rH, mainH), w = maxX - minX, h = min(max(h, minY) + rH, mainH)} }
            info = info[name]
            lbl:move(info.x, info.y)
            resizeContainers(info.side, info.w, info.h)
        end
    else
        local window, tab = GUIframe.windows[name], GUIframe.tabs[name]
        local con, tabs = get_containers(window.container.name)
        local x, y = getMousePosition()
        local over_con, over_tab
        if tab and tab.isClicked then
            moveWindow(tab.name, x - tab.difX, y - tab.difY)
            -- check to see if mouse is over any tab containers
            for _, tcon in ipairs(tab_names) do
                if check_overlap(tcon, x, y) then
                    over_con = tcon
                    GUIframe[tcon].mouse_over = true
                    local info = GUIframe.tabCoords[tcon]
                    local tx, ty, tw, th = info.x, info.y, info.w, info.h
                    createLabel("show_container", 0, 0, 0, 0, 1)
                    moveWindow("show_container", tx, ty)
                    resizeWindow("show_container", tw, th)
                    setLabelStyleSheet("show_container",[[
                        background-color: black;
                        border: 2px solid white;]])
                    showWindow("show_container")
                    lowerWindow("show_container")
                    -- check to see if mouse is over any tabs
                    for tname, info in pairs(GUIframe.tabs) do
                        if tname ~= name and check_overlap(info, x, y) then
                            over_tab = info.name
                            local windows = GUIframe[tcon].windows
                            local index = table.index_of(windows,over_tab)
                            makeSpace(GUIframe[tcon],tab,index)
                            break
                        end
                    end
                    break
                end
            end
            -- remove any unnecessary spaces in tab containers
            for _, name in ipairs(tab_names) do
                if name ~= over_con then
                    adjustTabs(GUIframe[name])
                    GUIframe[name].mouse_over = nil
                end
            end
        end
	end
	raiseEvent("GUIframe.buttonMove",name,event)
end

-- internally used function to handle sysWindowResizeEvent
function GUIframe.eventHandler(event,...)
    if event == "sysWindowResizeEvent" and GUIframe.initialized then
        refresh()
    end
end

registerAnonymousEventHandler("sysWindowResizeEvent","GUIframe.eventHandler")</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>GUIframe Top/Bottom Containers</name>
					<packageName></packageName>
					<script>  --GUIframe or not
	lab = lab or {}
	lab.GUIframeBottom = Geyser.Container:new({'GUIframeBottomContainer', x=0,y=0,width='100%', height='100%'})
  GUIframe.addWindow(lab.GUIframeBottom,"Bottom Container","bottom")
  
 
-- registerAnonymousEventHandler('sysLoadEvent', 'GUIframe.loadSettings')
 
 
 
 
 


   -- tabStyle = 
	 --[[
        background-color: rgba(150,150,150,100);
        border-width: 2px;
        border-style: outset;
        border-color: rgba(50,50,50,200);
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
        margin-right: 1px;
        margin-left: 1px;
        qproperty-alignment: 'AlignCenter | AlignCenter';]]--,</script>
					<eventHandlerList />
				</Script>
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>String Format - Python notation</name>
				<packageName></packageName>
				<script>getmetatable("").__mod = function(a, b)
        if not b then
                return a
        elseif type(b) == "table" then
                return string.format(a, unpack(b))
        else
                return string.format(a, b)
        end
end
--local cond = 'works.'
-- `print('Hey, this actually %s for multiple placeholders' % {'heyhey','cond'})</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Generic Class Constructor + table implementation</name>
				<packageName></packageName>
				<script>
function Class(members)
  members = members or {}
  local mt = {
    __metatable = members;
    __index     = members;
  }
  local function new(_, init)
    return setmetatable(init or {}, mt)
  end
  local function copy(obj, ...)
    local newobj = obj:new(unpack(arg))
    for n,v in pairs(obj) do newobj[n] = v end
    return newobj
  end
  members.new  = members.new  or new
  members.copy = members.copy or copy
  return mt
end


Class(table)

--[[
x = table:new{b=2, c=3} 
print(tostring( x:contains('c') )) 
--]]
</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>CSSman</name>
				<packageName></packageName>
				<script>-- CSSMan by Vadi. Public domain.

CSSMan = {}
CSSMan.__index = CSSMan

function CSSMan.new(stylesheet)
  local obj  = { stylesheet = {} }
  setmetatable(obj,CSSMan)
  local trim = string.trim

  assert(type(stylesheet) == "string", "CSSMan.new: no stylesheet provided. A possible error is that you might have used CSSMan.new, not CSSMan:new")

  for line in stylesheet:gmatch("[^\r\n]+") do
    local attribute, value = line:match("^(.-):(.-);$")
    if attribute and value then
      attribute, value = trim(attribute), trim(value)
      obj.stylesheet[attribute] = value
    end
  end

  return obj
end

function CSSMan:set(key, value)
  self.stylesheet[key] = value
end

function CSSMan:get(key)
  return self.stylesheet[key]
end

function CSSMan:getCSS(key)
  local lines, concat = {}, table.concat
  for k,v in pairs(self.stylesheet) do lines[#lines+1] = concat({k,": ", v, ";"}) end
  return concat(lines, "\n")
end

function CSSMan:gettable()
  return self.stylesheet
end

function CSSMan:settable(tbl)
  assert(type(tbl) == "table", "CSSMan:settable: table expected, got "..type(tbl))

  self.stylesheet = tbl
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>calculate filler</name>
				<packageName></packageName>
				<script>lab = lab or {}
	
	lab.calcFiller = function(str,length,fillchar)
		local filler = ''
		local fillchar = fillchar or ' '  --default to space
		local slen = str:len()
		
		if slen &lt; length then
			for i=1, length-slen do
				filler = filler .. fillchar
			end
		elseif slen == length then
			filler = ''
		else
			
			error('string too large for fillspace: ' .. length .. '\n' .. str)			
		end
		
		return filler
	end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>ColorLinks - by JorMox</name>
				<packageName></packageName>
				<script>-- colorLinks function provides an easy way to intersperse links into colored text
-- Link tag format: &lt;link: code here ; hint here ; color&gt;text of link&lt;/link&gt;

function colorLinks(win, str)
	if not str then
		str, win = win, "main"
	end
	str = str:split("&lt;/link&gt;")
	for _, w in ipairs(str) do
		local before, info, link = w:match("(.*)&lt;link: ([^&gt;]+)&gt;(.*)")
		if before then
			cecho(win, before)
			info = info:split(" ; ")
			if info[3] then
				if color_table[info[3]] then
					link = string.format("&lt;%s&gt;%s&lt;reset&gt;", info[3], link)
				else
					info[3] = nil
				end
			end
			cechoLink(win, link, info[1], info[2] or "", info[3] and true)
		else
			cecho(win, w)
		end
	end
end



--colorLinks("\nStart of line &lt;link: echo('link clicked') ; click here ; green'&gt; This can be clicked.&lt;/link&gt; and some more non-link text.")


</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Grid object class</name>
				<packageName></packageName>
				<script>--label grid
grid = {}
grid.__index = grid

function grid:new( lname, rows, columns, cont, css)
  local self = {}
  setmetatable(self, grid)

  -- calculate some values for geyser labels
  local w = 100/columns
  local h = 100/rows
  local topercent = function(n) return tostring(n) .. '%' end

  --lets create the labels
  for r=1,rows do
    for c=1,columns do
      self[lname .. r .. 'x' .. c] = Geyser.Label:new({
        name=string.format('%s_%sx%s', lname, r, c), 
        x = topercent((w*c)-w), y = topercent((h*r)-h), 
        width = topercent(w), height = topercent(h)
        }, cont)
      self[lname .. r .. 'x' .. c]:setStyleSheet(css:getCSS())
    end
  end

  -- the object is created, lets return it
  return self
end

--testcontainer = Geyser.Container:new({'testcontainer'})
--GUIframe.addWindow(testcontainer, 'TestGrid', 'topleft')
--testgrid = grid:new('tgrid', 4, 5, testcontainer, lab.BoxCSS)</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>makeClickyDraggy</name>
				<packageName></packageName>
				<script>--[[
local mt = getmetatable(eq)
function mt:newfunc() return 'newfunc says I work, but the notation is icky' end
setmetatable(eq, mt )
]]--


function makeClickyDraggy(obj) --object is a geyser container or ordinary label. Not a console or HBox etc
	local mt = getmetatable(obj)
	mt.MIN_HEIGHT = 100
	mt.MIN_WIDTH = 100
	
	-- add a resizer square to the geyser object
	obj['resizer'] = Geyser.Label:new({
  name = obj.name .. "_resizer",  x = '-15px', y = "-15px", width = 15, height = 15,
  fgColor = "black", color = "white",
	}, obj)
	obj.resizer:setStyleSheet([[border-radius: 2; background-color: white;]])
	
	-- add a mover square to the geyser object
	obj['mover'] = Geyser.Label:new({
  name = obj.name .. "_mover",  x = 0, y = 0, width = 15, height = 15,
  fgColor = "black", color = "white",
	}, obj)
	obj.mover:setStyleSheet([[border-radius: 2; background-color: white;]])
	setLabelClickCallback("mover", "onMoverClick")
	setLabelReleaseCallback("mover", "onMoverRelease")
	
	-- lets build the metamethods to add to the object
	function mt:showClickPoints()
		self['resizer']:show()
		self['mover']:show()
	end
	function mt:hideClickPoints()
		self['resizer']:hide()
		self['mover']:hide()
	end
	
	
	
	
	
	
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Animated Timers</name>
				<packageName></packageName>
				<script>demonnic = demonnic or {}
demonnic.anitimer = demonnic.anitimer or {}
demonnic.anitimer.timers = demonnic.anitimer.timers or {}
demonnic.anitimer.activeTimers = demonnic.anitimer.activeTimers or {}

function demonnic.anitimer:new(name, cons, time, options)
  if options and type(options) ~= "table" then
    error("demonnic.anitimer:new() -- if you provide a fourth parameter, it must be a table. Please see http://github.com/demonnic/animatedtimers for detailed usage information")
  end
  if not options then
    options = {}
  end
  if options.showTime == nil then options.showTime = true end 
  options.timerCaption = options.timerCaption or ""

  if not demonnic.anitimer.timers[name] then
    demonnic.anitimer.timers[name] = {}
    demonnic.anitimer.timers[name].gauge = Geyser.Gauge:new(cons, options.container)
    demonnic.anitimer.timers[name].watch = createStopWatch()
  else
    for k,v in pairs(cons) do
      demonnic.anitimer.timers[name].gauge[k] = v
    end
    if options.container then
      options.container:add(demonnic.anitimer.timers[name].gauge)
    else
      Geyser:add(demonnic.anitimer.timers[name].gauge)
    end
  end
    demonnic.anitimer.timers[name].max = time
    demonnic.anitimer.timers[name].current = time
    demonnic.anitimer.timers[name].showTime = options.showTime
    demonnic.anitimer.timers[name].timerCaption = options.timerCaption
		demonnic.anitimer.timers[name].hook = options.hook
    if options.cssFront then
      if not options.cssBack then
        options.cssBack = options.cssFront .. "background-color: black;"
      end
      demonnic.anitimer.timers[name].gauge:setStyleSheet(options.cssFront, options.cssBack)
    end
    if not table.contains(demonnic.anitimer.activeTimers, name) then table.insert(demonnic.anitimer.activeTimers, name) end
    resetStopWatch(demonnic.anitimer.timers[name].watch)
    startStopWatch(demonnic.anitimer.timers[name].watch)
    demonnic.anitimer:update(name)
end

function demonnic.anitimer:getTime(name)
  if not demonnic.anitimer.timers[name] then return 0 end
  local max = demonnic.anitimer.timers[name].max
  local current = getStopWatchTime(demonnic.anitimer.timers[name].watch)
  local newValue = max - current
  return newValue
end

function demonnic.anitimer:showTimers()
  demonnic:echo("&lt;yellow&gt;List of animated timers which have been created")
  for timer,_ in pairs(demonnic.anitimer.timers) do
    demonnic:echo(string.format("   %s", timer))
  end
  local actives = ""
  for _,timer in ipairs(demonnic.anitimer.activeTimers) do
    if actives == "" then
      actives = timer
    else
      actives = string.format("%s, %s", actives, timer)
    end
  end
  demonnic:echo("&lt;yellow&gt;Active timers: &lt;red&gt;" .. actives)
end

function demonnic.anitimer:update(name)
  if not demonnic.anitimer.timers[name] then return nil end
  demonnic.anitimer.timers[name].current = demonnic.anitimer:getTime(name)
  local time = demonnic.anitimer.timers[name].current
  demonnic.anitimer.timers[name].text = (demonnic.anitimer.timers[name].showTime and string.format("%.1f %s", time, demonnic.anitimer.timers[name].timerCaption or "")) or (demonnic.anitimer.timers[name].timerCaption or "")
  demonnic.anitimer.timers[name].gauge:setValue(demonnic.anitimer.timers[name].current, demonnic.anitimer.timers[name].max, demonnic.anitimer.timers[name].text)
end

function demonnic.anitimer:stop(name)
  if not demonnic.anitimer.timers[name] then return nil end
  stopStopWatch(demonnic.anitimer.timers[name].watch)
  demonnic.anitimer.timers[name].gauge:hide()
  for i,v in pairs(demonnic.anitimer.activeTimers) do
    if demonnic.anitimer.timers[v] == demonnic.anitimer.timers[name] then
      table.remove(demonnic.anitimer.activeTimers, i)
      return
    end
  end
end

function demonnic.anitimer:stopAll()
  for _,name in pairs(demonnic.anitimer.activeTimers) do
    demonnic.anitimer:stop(name)
  end
end

function demonnic.anitimer:pause(name)
  if not demonnic.anitimer.timers[name] then return nil end
  stopStopWatch(demonnic.anitimer.timers[name].watch)
  for i,v in pairs(demonnic.anitimer.activeTimers) do
    if v == name then
      table.remove(demonnic.anitimer.activeTimers, i)
      return
    end
  end
end

function demonnic.anitimer:pauseAll()
  for name,_ in pairs(demonnic.anitimer.timers) do
    demonnic.anitimer:pause(name)
  end
end

function demonnic.anitimer:destroy(name)
  if not demonnic.anitimer.timers[name] then return nil end
  demonnic.anitimer:stop(name)
  demonnic.anitimer.timers[name] = nil
  return true
end

function demonnic.anitimer:destroyAll()
  for name,_ in pairs(demonnic.anitimer.timers) do
    demonnic.anitimer:destroy(name)
  end
end

function demonnic.anitimer:start(name)
  if not demonnic.anitimer.timers[name] then return nil end
  local current = demonnic.anitimer.timers[name].current
  if current == 0 then return nil end
  demonnic.anitimer.timers[name].max = current
  resetStopWatch(demonnic.anitimer.timers[name].watch)
  startStopWatch(demonnic.anitimer.timers[name].watch)
  if not table.contains(demonnic.anitimer.activeTimers, name) then table.insert(demonnic.anitimer.activeTimers, name) end
  demonnic.anitimer.timers[name].gauge:show()
  demonnic.anitimer:update(name)
end

function demonnic.anitimer:startAll()
  for name,_ in pairs(demonnic.anitimer.timers) do
    if not table.contains(demonnic.anitimer.activeTimers, name) then
      demonnic.anitimer:start(name)
    end
  end
end

function demonnic.anitimer:animate()
  for i,v in pairs(demonnic.anitimer.activeTimers) do
    name = v
    demonnic.anitimer:update(name)
    if demonnic.anitimer:getTime(name) &lt;= 0 then
      demonnic.anitimer.timers[name].gauge:hide()
      table.remove(demonnic.anitimer.activeTimers, i)
      stopStopWatch(demonnic.anitimer.timers[name].watch)
      demonnic.anitimer.timers[name].max = 0
      demonnic.anitimer.timers[name].current = 0
			demonnic.anitimer:executeHook(name)
    end
  end
end

function demonnic.anitimer:executeHook(name)
  local hook = demonnic.anitimer.timers[name].hook
	local r = ""
	if hook == nil then
	  return
	elseif type(hook) == "string" then
	  local f,e = loadstring("return " .. hook)
		if not f then
		  f,e = assert(loadstring(hook))
		end
		f()
	elseif type(hook) == "function" then
	  hook()
	else
	  error("AnimatedTimers: you've provided a hook for " .. name .. " which is neither a string nor a function. Unable to execute")
	end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>GUILabel</name>
				<packageName></packageName>
				<script>
GUIlabel = GUIlabel or {}
local adjustInfo

GUIlabel.adjustLabel = function(name, x, y, w, h, c)
    local info, lbl
    if type(name) == "table" then
        if name.type == "label" then
            lbl = name
        else
            info = name
        end
    else
        info = {name = name, x = x, y = y, width = w, height = h, color = c}
    end
    if not lbl then
        lbl = Geyser.Label:new(info)
    end
    lbl:setClickCallback("GUIlabel.onClick",lbl)
    lbl:setReleaseCallback("GUIlabel.onRelease",lbl)
    lbl:setMoveCallback("GUIlabel.onMove",lbl)
    if info then
        return lbl
    end
end

local function make_percent(num)
    num = math.floor(10000*num)/100
    num = tostring(num).."%"
    return num
end

GUIlabel.finishLabel = function(lbl, size_as_percent, position_as_percent)
    lbl:setClickCallback("fakeFunction")
    lbl:setReleaseCallback("fakeFunction")
    lbl:setMoveCallback("fakeFunction")
    local x, y, w, h = lbl:get_x(), lbl:get_y(), lbl:get_width(), lbl:get_height()
    local winw, winh = getMainWindowSize()
    x, y, w, h = make_percent(x/winw), make_percent(y/winh), make_percent(w/winw), make_percent(h/winh)
    if size_as_percent then lbl:resize(w,h) end
    if position_as_percent then lbl:move(x,y) end
end

GUIlabel.onClick = function(lbl, event)
    if event.button == "LeftButton" then
        local x, y = getMousePosition()
        local w, h = lbl:get_width(), lbl:get_height()
        local x1, y1 = x - event.x, y - event.y
        local x2, y2 = x1 + w, y1 + h
        local left, right, top, bottom = event.x &lt;= 10, x &gt;= x2 - 10, event.y &lt;= 10, y &gt;= y2 - 10
        if right and left then left = false end
        if top and bottom then top = false end
        local move = not (right or left or top or bottom)
        adjustInfo = {name = lbl.name, top = top, bottom = bottom, left = left, right = right, move = move, x = x, y = y}
    end
end

GUIlabel.onRelease = function(lbl, event)
    if event.button == "LeftButton"  and adjustInfo and adjustInfo.name == lbl.name then
        adjustInfo = nil
    end
end

GUIlabel.onMove = function(lbl, event)
    if adjustInfo and adjustInfo.name == lbl.name then
        local x, y = getMousePosition()
        local winw, winh = getMainWindowSize()
        local x1, y1, w, h = lbl.get_x(), lbl.get_y(), lbl:get_width(), lbl:get_height()
        local dx, dy = adjustInfo.x - x, adjustInfo.y - y
        local max, min = math.max, math.min
        if adjustInfo.move then
            local tx, ty = max(0,x1-dx), max(0,y1-dy)
            tx, ty = min(tx, winw - w), min(ty, winh - h)
            lbl:move(tx, ty)
        else
            local w2, h2, x2, y2 = w - dx, h - dy, x1 - dx, y1 - dy
            local tx, ty, tw, th = x1, y1, w, h
            if adjustInfo.top then
                ty, th = y2, h + dy
            elseif adjustInfo.bottom then
                th = h2
            end
            if adjustInfo.left then
                tx, tw = x2, w + dx
            elseif adjustInfo.right then
                tw = w2
            end
            tx, ty, tw, th = max(0,tx), max(0,ty), max(10,tw), max(10,th)
            tw, th = min(tw, winw), min(th, winh)
            tx, ty = min(tx, winw-tw), min(ty, winh-th)
            lbl:move(tx, ty)
            lbl:resize(tw, th)
        end
        adjustInfo.x, adjustInfo.y = x, y
    end
end
</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>CSS</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Gauge CSS</name>
					<packageName></packageName>
					<script>lab.GaugeBackCSS = CSSMan.new([[
  background-color: rgba(0,0,0,0);
  border-style: solid;
  border-color: DimGrey;
  border-width: 2px;
  border-radius: 2px;
  margin: 5px;
	qproperty-alignment: 'AlignCenter | AlignTop';
]])

lab.GaugeFrontCSS = CSSMan.new([[
  background-color: rgba(0,0,0,0);
  border-style: solid;
  border-color: DimGrey;
  border-width: 2px;
  border-radius: 2px;
  margin: 5px;
	qproperty-alignment: 'AlignCenter | AlignBottom';
]])</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Background CSS</name>
					<packageName></packageName>
					<script>lab.BackgroundCSS = CSSMan.new([[
  background-color: rgb(20,0,20);
]])

lab.TempBackgroundCSS = CSSMan.new([[
  background-color: rgb(120,0,120);
]])</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Icon CSS</name>
					<packageName></packageName>
					<script>lab.IconCSS = CSSMan.new([[
	background-color: rgba(0,0,0,0);
	foreground-color: rgb(200,100,100);
	border-style: solid;
	border-color: DimGrey;
	border-width: 2px;
	border-radius: 2px;
	margin: 5px;
]])</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Box CSS</name>
					<packageName></packageName>
					<script>lab.BoxCSS = CSSMan.new([[
  background-color: rgba(0,0,0,100);
  border-style: solid;
  border-width: 2px;
  border-radius: 2px;
  border-color: DimGrey;
  margin: 1px;
]])

lab.BoxNBCSS = CSSMan.new([[
  background-color: rgba(0,0,0,0);
]])</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Tab CSS</name>
					<packageName></packageName>
					<script>lab.TabCSS = CSSMan.new([[
  background-color: rgba(0,0,0,100);
  border-style: solid;
  border-width: 2px;
  border-color: DimGrey;
  border-radius: 2px;
  margin: 1px;
  qproperty-wordWrap: true;
]])

lab.SelectedTabCSS = CSSMan.new([[
  background-color: rgba(50,50,50,100);
  border-style: solid;
  border-width: 2px;
  border-color: sienna;
  border-radius: 2px;
  margin: 1px;
  qproperty-wordWrap: true;
]])</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Title CSS</name>
					<packageName></packageName>
					<script>lab.TitleCSS = CSSMan.new([[
  background-color: rgba(0,0,0,0);
  border-style: solid;
  border-color: DimGrey;
  border-width: 2px;
  border-radius: 2px;
  margin: 3px;
	qproperty-alignment: 'AlignLeft';
]])

</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Prop CSS</name>
					<packageName></packageName>
					<script>lab.PropCSSblank = CSSMan.new([[
  background-color: rgba(50,50,50,50);
  border-style: solid;
  border-color: DimGrey;
  border-width: 2px;
  border-radius: 2px;
  margin: 3px;
	qproperty-alignment: 'AlignCenter';
]])


lab.PropCSSgood = CSSMan.new([[
  background-color: rgba(50,50,50,50);
  border-style: solid;
  border-color: SeaGreen;
  border-width: 2px;
  border-radius: 2px;
  margin: 3px;
	qproperty-alignment: 'AlignCenter';
]])


lab.PropCSSburnable = CSSMan.new([[
  background-color: rgba(50,50,50,50);
  border-style: solid;
  border-color: SaddleBrown;
  border-width: 2px;
  border-radius: 2px;
  margin: 3px;
	qproperty-alignment: 'AlignCenter';
]])

lab.PropCSSonfire = CSSMan.new([[
  background-color: rgba(50,50,50,50);
  border-style: solid;
  border-color: OrangeRed;
  border-width: 2px;
  border-radius: 2px;
  margin: 3px;
	qproperty-alignment: 'AlignCenter';
]])

lab.PropCSSexplodable = CSSMan.new([[
  background-color: rgba(50,50,50,50);
  border-style: solid;
  border-color: firebrick;
  border-width: 2px;
  border-radius: 2px;
  margin: 3px;
	qproperty-alignment: 'AlignCenter';
]])</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Text Field CSS</name>
					<packageName></packageName>
					<script>lab.TextFieldCSS = CSSMan.new([[
  background-color: rgba(0,0,0,100);
  border-style: solid;
  border-width: 2px;
  border-color: DimGrey;
  border-radius: 2px;
  margin: 1px;
  qproperty-wordWrap: true;
]])

lab.SelectedTextFieldCSS = CSSMan.new([[
  background-color: rgba(50,50,50,100);
  border-style: solid;
  border-width: 2px;
  border-color: sienna;
  border-radius: 2px;
  margin: 1px;
  qproperty-wordWrap: true;
]])</script>
					<eventHandlerList />
				</Script>
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Table functions</name>
				<packageName></packageName>
				<script>--remove all instances of value V from indexed table T
function table.removeall(t,v)
	for i,val in ipairs(t) do
		if v == val then
			table.remove(t,i)
		end
	end
end

function table.remove_val(t,val)
	table.remove(t, table.index_of(t, val) )
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Grid dimensions</name>
				<packageName></packageName>
				<script>function calc_grid(rows, columns)

  local w = 100/columns
  local h = 100/rows
  local topercent = function(n) return tostring(n) .. '%' end
	local grid = {}
	
  --lets calculate the label dimensions
  for r=1,rows do
    for c=1,columns do
			local dimensions = {}
			dimensions.r = tostring(r)
			dimensions.c = tostring(c)
			dimensions.x = topercent((w*c)-w)
			dimensions.y = topercent((h*r)-h)
			dimensions.width = topercent(w)
			dimensions.height = topercent(h)
			dimensions.w = topercent(w)
			dimensions.h = topercent(h)
			
			table.insert(grid, dimensions)
    end
  end

  return grid
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>String Library Additions</name>
				<packageName></packageName>
				<script>function string.rightAlign(text, num)
    local width = tonumber(num) or 80
    return(string.rep(" ", (width - #text)) .. text)
end

local temp = "the current line length is:"

echo('\n')
echo(temp)
echo(getCurrentLine():len())

local righttest = 'right aligned after text on CURRENT line.'
echo(righttest:rightAlign(100-getCurrentLine():len()))</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Get Class</name>
				<packageName></packageName>
				<script>function getclass()
	local class = gmcp.Char.Status.class
	return class:gsub('%.',''):lower()
end

function getlevel()

	return tonumber( string.match(gmcp.Char.Status.level, '^(%d+)') )

end

function getname()

 return gmcp.Char.Status.first_name:lower()

end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>String Library Addons</name>
				<packageName></packageName>
				<script>function string:fillto(maxw, fillchar)
  local slen = string.len(self)
  local filler = ''
  local fillchar = fillchar or ' '
  if slen &lt; maxw then
    filler = string.rep(fillchar, maxw - slen)
  end
  return filler
end

function string:calcfiller(maxw, fillchar)
  local slen = string.len(self)
  local filler = ''
  local fillchar = fillchar or ' '
  if slen &lt; maxw then
    filler = string.rep(fillchar, maxw - slen)
  end
  return filler
end

function string:padleft(swidth, padchar)
  local padchar = padchar or ' '
  local str = self
  local slen = str:len()
  if slen &lt; swidth then
    str = string.rep(padchar, swidth - slen) .. str
  elseif slen &gt; swidth then
    str = str:cut(swidth)
  end
  return str
end

function string:padright(swidth, padchar)
  local padchar = padchar or ' '
  local str = self
  local slen = str:len()
  if slen &lt; swidth then
    str = str .. string.rep(padchar, swidth - slen)
  elseif slen &gt; swidth then
    str = str:cut(swidth)
  end
  return str
end

function string:csqbr(cols, padtype, padto, padchar)
  local s = self
  local padtype = padtype or 'no padding necessary'
  local padchar = padchar or ' '
  -- default space as pad type
  if padtype == 'left' then
    s = s:padleft(padto, '-')
  elseif padtype == 'right' then
    s = s:padright(padto, padchar)
  end
  return string.format("&lt;%s&gt;[&lt;%s&gt;%s&lt;%s&gt;]", cols.br, cols.d, s, cols.br)
end

function string.align(str, how, width, char)
	local char = char or ' '
  if (not str) then
    error("No string was passed")
  end
  local str = tostring(str);
  local amt = tonumber(width) or 80;
  local space = amt - #(str);
  if (how == "left") then
    return str .. string.rep(char, space)
  elseif (how == "right") then
    return string.rep(char, space) .. str
  elseif (how == "center") then
    -- math.round is not a native lua math option, and isn't included in mudlet by default (tested)
    return string.rep(char, (amt / 2) - math.floor(#(str) / 2)) .. str .. string.rep(char, (amt / 2) - math.floor(#(str) / 2))
  else
    error("Need to be given left, right or center alignment")
  end
end</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>cLinkify</name>
					<packageName></packageName>
					<script>function cLinkify(str, tooltip, funcstring, funcargs)
	local funcstring = funcstring %funcargs
	cechoLink(str, funcstring, tooltip, true)
end

</script>
					<eventHandlerList />
				</Script>
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>abtn</name>
				<packageName></packageName>
				<script>abtn = abtn or {}
abtn.__index = abtn
abtn.mesets = abtn.mesets or {}











function abtn.click_sorter(btn)
	--print('----------------')
	--print(btn .. ' clicked')
	--_G[btn]['onclickfunc']()
	local s = [[_G.%s.onclickfunc()]] %{btn}
	--print(s)
	loadstring(s)()
end



function abtn.varchecker(var)
	
end
</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>abtn:new()</name>
					<packageName></packageName>
					<script>function abtn:new(params, container)
  local self = {}
  local container = container or Geyser
  setmetatable(self, abtn)

  -- first declare all parameters ---------------------
  self.name = params.name
  self.x = params.x
  self.y = params.y
  self.width = params.width
  self.height = params.height
  self.state = 1
  self.event = params.event or params.name .. '_clicked'
  self.check = params.check or false
	self.timeout = params.timeout or 1
  self.listento = params.listento or false
  self.multistate = params.multistate or false
  self.imgs = params.imgs or false
  self.cssman = table.deepcopy(params.cssman) or false
  self.aliases = params.aliases or false
  self.funcs = params.funcs or false
  self.css = params.css or false
  self.msgs = params.msgs or false
  self.imgs = params.imgs or false
	self.id = params.id or false
	self.cd = params.cd or false
	self.cdtimeout = params.cdtimeout or false
	self.cdlockout  = params.cdlockout or true 
  
  -- now we create stuff ------------------------------

  -- this internal func needs to exist as a workaround because of mudlet
	-- setClickCallback taking only string representations of functions.
  self.onclickfunc = function()
    if self.multistate then
      self:run_multistate()
    else
      self:toggle()
    end
  end
  
  -- create the label itself
  self[self.name .. '_label'] = Geyser.Label:new({
      name = self.name .. '_mainlabel',
      x = self.x or nil, y = self.y or nil,
      width = self.width or nil, height = self.height or nil, 
    }, container) --if x,y,width,height not defined, container must be hbox/vbox

  -- set the setClickCallback (future: other types of clicks and click-hold-down lengths?)
  self[self.name .. '_label']:setClickCallback('abtn.click_sorter', self.name, true)

  -- register the event handler (this event will cause button visuals to update)
  if self.listento then 
    self.eventhandler = registerAnonymousEventHandler(self.listento,  function() self:sync() end ) 
  end
	
	-- create the cd
	if self.cd then
		self.cdobj = balsys:create( self.name .. '_cd', true, true, 0.75)
	end

  -- and now we sync it with actual values
  self:initial_sync()

  return self
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>abtn:helpers</name>
					<packageName></packageName>
					<script>function abtn:getstate()
	return self.state
end

function abtn:hide()
	self[self.name .. '_label']:hide()
end

function abtn:show()
	self[self.name .. '_label']:show()
end

function abtn:echo(msg)
	self[self.name .. '_label']:echo(msg)
end

function abtn:setStyleSheet(stylesheet)
	self[self.name .. '_label']:setStyleSheet(stylesheet)
end

function abtn:flash(duration)
	self[self.name .. '_label']:flash(duration or 4)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>abtn:cdowns</name>
					<packageName></packageName>
					<script>function abtn:spend(time)
	if not self.cd then return false end
	local time = time or self.cd
	self[self.name .. '_cd']:spend(time)
end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>abtn:setmsg()</name>
					<packageName></packageName>
					<script>function abtn:setmsg(msg, state)
  local state = state or false
  if state then
    self.msgs[tonumber(state)] = msg
    self[self.name .. '_label']:echo(self.msgs[tonumber(self.state)])
  else
    for state, msgs in ipairs(self.msgs) do
      self.msgs[state] = msg
      self[self.name .. '_label']:echo(self.msgs[tonumber(self.state)])
    end
  end
end

function abtn:setFontSize(size)
  self[self.name .. '_label']:setFontSize(size)
end

function abtn:setFont(font)
  self[self.name .. '_label']:setFont(font)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>abtn:toggle()</name>
					<packageName></packageName>
					<script>function abtn:toggle()
  if self.state == 1 then
    self:on()
  else
    self:off()
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>abtn:off()</name>
					<packageName></packageName>
					<script>function abtn:off(nocmd)
  local nocmd = nocmd or false
  if self.state == 1 then return end  
  self.state = 1
  -- first, run commands if needed
  if not nocmd then
    if self.aliases then
      if self.aliases[2] then 
        expandAlias(self.aliases[2]) 
      end
    end

    if self.funcs then
      if self.funcs[2] then 
        self.funcs[2]() 
      end
    end
  end

  if self.msgs then
    if self.msgs[1] then
      self:echo(self.msgs[1])
    end
  end
  
  if self.cssman then
    self:apply_cssman()
  elseif self.css then
    self[self.name .. '_label']:setStyleSheet(self.css[tonumber(self.state)])
  end
  
  
  if not nocmd then raiseEvent(self.event, '1') end

  if self.timeout then
    if self.timer then killTimer(self.timer) end
    self.timer = tempTimer(self.timeout, function() self:sync() end)
  end
  
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>abtn:on()</name>
					<packageName></packageName>
					<script>
function abtn:on(nocmd)
  local nocmd = nocmd or false
  if self.state == 2 then return end
  self.state = 2

  if not nocmd then
    if self.aliases then
      if self.aliases[1] then 
        expandAlias(self.aliases[1]) 
      end
    end
  
    if self.funcs then
      if self.funcs[1] then
        self.funcs[1]() 
      end
    end
  end

  if self.msgs then
    if self.msgs[2] then
      self:echo(self.msgs[2])
    end
  end
  
  if self.cssman then
    self:apply_cssman()
  else
    self[self.name .. '_label']:setStyleSheet(self.css[2])
  end
  
  
  if not nocmd then raiseEvent(self.event, '2') end
  if self.timeout then
    if self.timer then killTimer(self.timer) end
    self.timer = tempTimer(self.timeout, function() self:sync() end)
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>abtn:set_multistate()</name>
					<packageName></packageName>
					<script>

function abtn:set_multistate(state)

	self.state = state
	
	if self.msgs then 
		if self.msgs[state] then
			self:echo(self.msgs[tonumber(self.state)])
		end
	end
	
	if self.cssman then
		self:apply_cssman()
	else
		self[self.name .. '_label']:setStyleSheet(self.css[tonumber(self.state)])
	end
	

end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>abtn:run_multistate()</name>
					<packageName></packageName>
					<script>

function abtn:run_multistate(nocmd)
	local nocmd = nocmd or false
	--if self.state &lt; 3 or not self.multistate then return end
	--print('lets turn ' .. self.name .. ' on')
	if self.funcs then
		if self.funcs[self.state] then
			self.funcs[self.state]()
		end
	end

end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>abtn:sync()</name>
					<packageName></packageName>
					<script>--script will check reality and update the abtn to reflect it

function abtn:sync()
	local result = true
	
	if not self.check then
		return false
	end
	
	--deb('abtn.sync() result is inistiated as: ' .. str(result))
	--deb(type(self.check) .. '   ' .. tostring(self.check) .. '   ' .. tostring( _G[self.check]))
	if type(self.check) == 'function' then
		result = self.check() or false
		--deb(self.name .. ': ' .. str(result),3)
	elseif type(self.check) == 'boolean' then
		result = self.check or false
	elseif type(self.check) == 'string' then
		result = _G[self.check] or false
	else
		error("ABTN abtn:sync() wrong 'check' type for: " .. self.name)
	end

	--print(string.format('BUtton: %s    Result: %s, State: %s, Multistate: %s', self.name, str(result), str(self.state), str(self.multistate)))
	
	if type(result) == 'number' then
		if self.state == result then return true
		elseif self.multistate then
			self:set_multistate(result)
		elseif result == 1 then
			self:off()
		elseif result == 2 then
			self:on()
		else
			error('abtn:sync() result is numerical but out of boundary: ' .. tostring(result) ..'. Possible causes: abtn not configured for multistate, or check() returning incorrect value.')
		end
	elseif type(result) == 'boolean' then
  	if result then
  		if self.state == 1 then
  			self:on('nocmd')
  		end
		else
			if self.state &gt; 1 then
				self:off('nocmd')
			end
  	end
	else
		error('abtn:sync() result is neither number or boolean: ' .. type(result))
	end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>apply_cssman()</name>
					<packageName></packageName>
					<script>function abtn:apply_cssman(cssman_set)

	local state = tonumber(self.state)
	local cssman_set = cssman_set or self.cssman[state]

	--print( self.name .. ' is now in state: ' .. str(self.state) )


	
	for attribute,value in pairs(cssman_set) do
		self.cssman.default:set(attribute, value)
	end
	
	self[self.name .. '_label']:setStyleSheet(self.cssman.default:getCSS())
	
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>example Multistate new</name>
					<packageName></packageName>
					<script>--[=[
function DRAWexampleMSbtn()
  	exampleMSbtn = abtn:new({
  		name = 'exampleMSbtn',
  		x = 900, y = 100, width = 100, height = 100,
			multistate = 3,
			cssman = {
				default = lab.actionbtn,
				[1] = {['background-color'] = 'rgba(66,66,66,0)', ['border-color'] = 'DimGrey',},
				[2] = {['background-color'] = 'rgba(66,66,66,0)', ['border-color'] = 'MediumPurple',},
				[3] = {['background-color'] = 'rgba(66,66,66,0)', ['border-color'] = 'DodgerBlue',},
			},
  		msgs = {
				[1] = 'Hunting is off',
  			[2] = 'Hunting with:&lt;br&gt;Swarm',
				[3] = 'Hunting with:&lt;br&gt;Freeze',
			},
  		listento = 'nanoseer ui tick',
			multistate = 3,
  		check = function() return (teststatus == 'off' and 1) or (teststatus == 'swarm' and 2) or (teststatus == 'freeze' and 3) end,
  		funcs = {
				[1] = function() testrunstatus('swarm') end,
  			[2] = function() testrunstatus('freeze') end,
				[3] = function() testrunstatus('off') end,
			},
  	})
end
teststatus = 'freeze'
function testrunstatus(mode)
	local mode = mode or false
	if not mode then
		return teststatus
	else
		teststatus = mode
		print('Teststatus is now: ' .. teststatus)
	end
end
		--]=]
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>abtn:initvalues()</name>
					<packageName></packageName>
					<script>function abtn:initial_sync()
	if self.cssman then
		self:setStyleSheet(self.cssman.default:getCSS())
		self:apply_cssman()
	elseif self.css then
		self:setStyleSheet(self.css[1])
	end
	
	if self.msgs then
		if self.msgs[1] then 
			self:echo(self.msgs[1])
		end
	end
	
	self:sync()
		
		
	
end</script>
					<eventHandlerList />
				</Script>
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Debug echo system</name>
				<packageName></packageName>
				<script>function deb(msg, indent)
	local indent  = indent or 0
	if debugging then
		if indent == 0  then echo('\n') end
		print( string.format( '{%s%s}', string.rep(' ', indent), msg ) )
	end
end

debugging = false</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Division - Whole number result</name>
				<packageName></packageName>
				<script>function DIV(a,b)
    return (a - a % b) / b
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Logger</name>
				<packageName></packageName>
				<script>lab = lab or {}
gamelogging = gamelogging or false

function lab.drawlogtoggle(container)
  local dims = {x = '-18%', y = '0%', width = '16%', height = '200%',}
  lab.logtoggle =
    abtn:new(
      {
        name = 'lab.logtoggle',
        x = dims.x,
        y = dims.y,
        width = dims.width,
        height = dims.height,
        cssman =
          {
            default = lab.actionbtn,
            [1] = {['background-color'] = 'DarkSlateGrey', ['border-color'] = 'DimGrey'},
            [2] = {['background-color'] = 'SeaGreen', ['border-color'] = 'LawnGreen'},
          },
        msgs = {[1] = 'Logging&lt;br&gt;Off',[2] = 'Logging&lt;br&gt;On'},
        
        listento = 'ui tick',
        check =
          function()
            return gamelogging
          end,
        funcs =
          {
            [1] =
              function()
                startLogging(false)
                startLogging(true)
                gamelogging = true
              end,
            [2] =
              function()
                startLogging(false)
                gamelogging = false
              end,
          },
      },
      container
    )
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Weaptracker</name>
				<packageName></packageName>
				<script>weaponry = weaponry or {}
weaponry.wtable = weaponry.wtable or {}
weaponry.cols = {
	br = 'SlateGray', 
	d = 'SteelBlue',
	t = 'LightBlue',
	h = 'SlateGray',
}

function weaponry.msg(msg)
	local cols = weaponry.cols
	local pre = 'Weapsys'
	cecho("%s: &lt;%s&gt;%s" %{pre:csqbr(cols), cols.d, msg})
end

function weaponry.clear()
	weaponry.wtable = {}
end




--[[
local tstring = '12345'
echo(tstring:padleft(6, '-'))
cecho( tstring:csqbr(weaponry.cols, 'left', 10, '-'))
]]--</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Add Weapon to Table</name>
					<packageName></packageName>
					<script>function weaponry.add(id, sname, lname, loc, msgornot)
	local msgornot = msgornot or false
	weaponry.wtable[sname] = weaponry.wtable[sname] or {}
	weaponry.wtable[sname][id] = {
		shortname = sname,
		longname = lname,
		loc = loc,
		id = id,
		}
	
	if msgornot then
		weaponry.msg('Adding %s in %s (%s): %s' %{sname, loc, id, lname})
	end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Proball</name>
					<packageName></packageName>
					<script>function weaponry.probeall()
	--print('probeall called')
	enableTrigger("Weapon Probe Capture")
	local disableWeaponProber = tempTimer(4, function()
	 		disableTrigger('Weapon Probe Capture')
	 end)
	
	for wtype,subtable in pairs(weaponry.wtable) do

		for _,weap in pairs(subtable) do
			local probestring = 'probe'
			if weap.loc == 'mwp' then
				probestring = 'mwp probe'
			end
			send('%s %s' %{probestring, weap.id})
		end
	end


end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Display Weapon Table</name>
					<packageName></packageName>
					<script>function weaponry.showall()
	local cols = weaponry.cols
	local twidth = 100
	local border = '-'
	local weaptable = weaponry.sort('level')
	--display(weaptable)
	local padchar = ' '
	local class = getclass()
	local mylevel = getlevel()
	
	
	-- first, the main heading
	cecho('\n&lt;%s&gt;%s&lt;%s&gt; %s &lt;%s&gt;%s' %{cols.h, border:rep(44), cols.t, 'WEAPON LIST', cols.h, border:rep(43)})
	
	-- loop through weapon types
	for wtype,subweaptable in pairs(weaptable) do
		-- The subheadings
		cecho('\n&lt;%s&gt;%s &lt;%s&gt;%s &lt;%s&gt;%s' %{
			cols.h, border:rep(2), 
			cols.t, wtype:upper(), 
			cols.h, border:rep(twidth-wtype:len()-4)
			}
		)
		--
		-- loop through the sub-tables
		for _,weapon in ipairs(subweaptable) do
			local id = weapon.id
			local wlev = tonumber(weapon.level)
		
		-- The weapon lines
		
			local cols = table.deepcopy(cols)
			if wlev &gt; mylevel then
				cols.d = 'grey'
			end
			if weapon.loc == 'wie' or weapon.loc == 'mwp' then
				cols.d = 'sienna'
			end
			
					
			cecho('\n &lt;%s&gt;%s&lt;%s&gt;%s &lt;%s&gt;[&lt;%s&gt;%s&lt;%s&gt;] &lt;%s&gt;[&lt;%s&gt;%s&lt;%s&gt;] &lt;%s&gt;[&lt;%s&gt;%s&lt;%s&gt;] &lt;%s&gt;[&lt;%s&gt;%s&lt;%s&gt;] &lt;%s&gt;[&lt;%s&gt;%s&lt;%s&gt;] &lt;%s&gt;[&lt;%s&gt;%s&lt;%s&gt;]' %{
			cols.d, id:align('left', 8, padchar),
			cols.d, weapon.longname:align('left', 32, padchar),
			cols.br, cols.d, weapon.durability, cols.br,
			cols.br, cols.d, weapon.loc, cols.br,
			cols.br, cols.d, weapon.level:align('right', 2, padchar), cols.br,
			cols.br, cols.d, weapon.power:align('right', 5, padchar), cols.br,
			cols.br, cols.d, weapon.health:align('right', 3, padchar), cols.br,
			cols.br, cols.d, weapon.genelock:cut(1):align('left', 1, padchar):title(), cols.br,
				}
			)
		-- the links
  		local link
  		
			
			
		--[=[	if class == 'beast' then
			--	print(weapon.shortname)
				link = ' '
				if id == mwp[weapon.shortname] then
					link = 'X'
				end
    		cLinkify(' ' .. link:csqbr(cols), 'Click to mark as preferred MWP', [[mwp.setweapon('%s', '%s')]], {weapon.shortname,id})		
			end
			--]=]
			
			
  		if weapon.loc == 'inv' then
  			link = 'W'
  			if class == 'beast' then
  				cLinkify(' ' .. link:csqbr(cols), 'Click to wield.', [[mwp.mount('%s', '%s')]], {weapon.shortname, id})
  			else
  				cLinkify(' ' .. link:csqbr(cols), 'Click to wield.', [[send('wield %s')]], id)
  			end
  			
  		end
  		
  		link = 'J'
  		cLinkify(' ' .. link:csqbr(cols), 'Click to junk.', [[send('junk scrap %s')]], id)
			
  		link = 'R'
  		cLinkify(' ' .. link:csqbr(cols), 'Click to repair.', [[sendAll('weapon repair %s', 'weapon repair %s confirm')]], {id, id})
			
  		
  		link = 'S'
  		cLinkify(' ' .. link:csqbr(cols), 'Click to stock in shop.', [[clearCmdLine() appendCmdLine('tt shop stuff stock %s for 1000;;tt shop stuff categorize %s PIECE')]], {id,id})



		end
	end
	-- bottom border
	cecho('\n&lt;%s&gt;%s' %{cols.h, border:rep(100)})
end

--local tstring = '123'
--print(tstring:align('center', 20, '='))</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>weaponry.sort</name>
					<packageName></packageName>
					<script>function weaponry.sort(sortby)
	weaponry.indexify()
	for wtype,itable in pairs(weaponry.iwtable) do
		table.sort(weaponry.iwtable[wtype], function(a,b) return a.power &gt; b.power end)
	end
	
	return weaponry.iwtable

end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Create Indexed Wtable</name>
					<packageName></packageName>
					<script>function weaponry.indexify()

	weaponry.iwtable = {}
	for wtype,subtable in pairs(weaponry.wtable) do
		weaponry.iwtable[wtype] = {}
		for id,weapon in pairs(subtable) do
			table.insert(weaponry.iwtable[wtype], weapon)
		end
	end



end</script>
					<eventHandlerList />
				</Script>
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>ArmourTracker</name>
				<packageName></packageName>
				<script>armour = armour or {}
armour.atable = armour.atable or {}
armour.cols = {
	medium = 'DarkSalmon',
	light = 'SteelBlue',
	heavy = 'red',
	worn = 'DarkSalmon',
	h = 'SteelBlue',
	t = 'cyan',
	d = 'LightGrey',
	w = 'DarkSalmon',
	br = 'LightSkyBlue',
	l = 'lavender',
}

function armour.msg(msg)
	local cols = armour.cols
	local pre = 'ArmourSys'
	cecho("%s: &lt;%s&gt;%s" %{pre:csqbr(cols), cols.d, msg})
end

function armour.clear()
	armour.atable = {}
end</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Add Armour to Table</name>
					<packageName></packageName>
					<script>function armour.add(id, slot, lname, qual, health, lvl, loc, msgornot)
	local msgornot = msgornot or false
	armour.atable[slot] = armour.atable[slot] or {}
	armour.atable[slot][id] = {
		slot = slot,
		longname = lname,
		loc = loc,
		id = id,
		quality = quality,
		health = health,
		level = lvl,
		}
	
	if msgornot then
		armour.msg('Adding %s in %s (%s): %s' %{slot, loc, id, lname})
	end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Probeall</name>
					<packageName></packageName>
					<script>function armour.probeall()
	--print('probeall called')
	enableTrigger("Armour Probe Capture")
	local disableArmourProber = tempTimer(4, function()
	 		disableTrigger('Armour Probe Capture')
	 end)
	
	for slot,subtable in pairs(armour.atable) do

		for _,armourpiece in pairs(subtable) do
			local probestring = 'probe'
			if armourpiece.loc == 'wie' then probestring = 'armor probe' end
			send('%s %s' %{probestring, armourpiece.id})
		end
	end


end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Display Armour Table</name>
					<packageName></packageName>
					<script>function armour.showall(filter)
	local cols = armour.cols
	local twidth = 100
	local border = '-'
	local armourtable = armour.sort('level')
	local padchar = ' '
	local class = getclass()
	local mylevel = getlevel()
  local filter = filter or 'all'
	
	
	-- first, the main heading
	cecho('\n&lt;%s&gt;%s&lt;%s&gt; %s &lt;%s&gt;%s' %{cols.h, border:rep(44), cols.t, 'ARMOUR LIST', cols.h, border:rep(43)})
	
	-- loop through armour slots
	local resorder = {'impact', 'em', 'thermal', 'cellular', 'mental', 'draining', 'electric'}
	for slot,subarmourtable in pairs(armourtable) do
		-- The subheadings
		cecho('\n&lt;%s&gt;%s &lt;%s&gt;%s &lt;%s&gt;%s' %{
			cols.h, border:rep(2), 
			cols.t, slot:upper(), 
			cols.h, border:rep(53)
			}
		)
		--resistance headings
		for _,res in ipairs(resorder) do
			cecho('&lt;%s&gt;|&lt;%s&gt;%s' %{
  			cols.br, 
  			cols.d, 
  			res:cut(2):align('left',2)
  			}
  		)
  	end
  		cecho('&lt;%s&gt;|' %{cols.br})	
		cecho('&lt;%s&gt;%s' %{cols.h, border:rep(10)})
		--
		-- loop through the sub-tables
		for _,armourpiece in ipairs(subarmourtable) do
			local id = armourpiece.id
			local alev = tonumber(armourpiece.level)
		
		-- The armourpiece lines
		
			local col = cols.d
			--print('\n' .. armourpiece.grade .. ' ' ..col)
			if armourpiece.grade == 'heavy' then col = cols.heavy end
		--	if armourpiece.grade == 'medium' then col = cols.medium end
		--	if armourpiece.grade == 'llight' then col = cols.light end
			
			--print('\n' .. armourpiece.grade .. ' ' ..col)

			if alev &gt; mylevel then
				col = 'grey'
			end
			if armourpiece.loc == 'wie' then
				col = cols.worn
			end
			
			
					
			cecho('\n &lt;%s&gt;%s&lt;%s&gt;%s &lt;%s&gt;[&lt;%s&gt;%s&lt;%s&gt;]&lt;%s&gt;[&lt;%s&gt;%s&lt;%s&gt;]&lt;%s&gt;[&lt;%s&gt;%s&lt;%s&gt;]&lt;%s&gt;[&lt;%s&gt;%s&lt;%s&gt;]&lt;%s&gt;[&lt;%s&gt;%s&lt;%s&gt;] ' %{
			col, id:align('left', 8, padchar),
			col, armourpiece.longname:cut(30):align('left', 30, padchar),
			cols.br, col, armourpiece.loc, cols.br,
			cols.br, col, armourpiece.level:align('right', 2, padchar), cols.br,
			cols.br, col, armourpiece.grade:cut(1):align('left', 1, padchar), cols.br,
			cols.br, col, armourpiece.health:align('right', 3, padchar), cols.br,
			cols.br, col, armourpiece.smartcore:align('left', 1, padchar), cols.br,
				}
			)
			--display(armourpiece)
  			--resistances!
  		for _,resname in ipairs(resorder) do
				--display(armourpiece[resname])
  			local resval = tostring(math.floor(armourpiece[resname] + 0.5))
  			cecho('&lt;%s&gt;|&lt;%s&gt;%s' %{
  				cols.br, 
  				col, 
  				resval:align('right',2)
  				}
  			)
  		end
  		
  		cecho('&lt;%s&gt;|' %{cols.br})	
			
			
			
			
			
			
			-- the links
	  		local link
	  		
	  		if armourpiece.loc == 'inv' then
	  			link = 'W'
	  			cLinkify(' ' .. link:csqbr(cols), 'Click to wear.', [[send('armor upgrade %s with %s')]], {slot,id})			
	  		end
	  		
	  		link = 'J'
	  		cLinkify(' ' .. link:csqbr(cols), 'Click to junk.', [[sendAll('junk scrap %s', 'agree')]], id)
				
	  		link = 'R'
	  		cLinkify(' ' .. link:csqbr(cols), 'Click to repair.', [[sendAll('armour repair %s', 'armour repair %s confirm')]], {slot, slot})
				
	  		
	  		link = 'S'
	  		cLinkify(' ' .. link:csqbr(cols), 'Click to stock in shop.', [[clearCmdLine() appendCmdLine('tt shop lightarmour stock %s for ')]], id)
			
			
		end
			echo('\n')
	end
	-- bottom border
	cecho('\n&lt;%s&gt;%s' %{cols.h, border:rep(100)})
end

--local tstring = '123'
--print(tstring:align('center', 20, '='))</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>armour.sort</name>
					<packageName></packageName>
					<script>function armour.sort(sortby)
  --first we need to create a set of indexed lists
  armour.indexify()
  for slot, subtable in pairs(armour.iatable) do
    table.sort(
      armour.iatable[slot],
      function(a, b)
        if a.grade ~= b.grade then
          return a.grade &gt; b.grade
        end
        return tonumber(a.level) &gt; tonumber(b.level)
      end
    )
  end
  return armour.iatable
end

--[[    table.sort(
      armour.iatable[slot],
      function(a, b)
        return a.level &gt; b.level
      end
    )]]
--
--[[
        if a.grade ~= b.grade then
            return a.grade &gt; b.grade
        end
]]
--		
--print('Sorting by level: ' .. a.level ' &lt;--&gt; ' .. b.level)</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>armour.indexify</name>
					<packageName></packageName>
					<script>function armour.indexify()
  armour.iatable = {}
  for slot, subtable in pairs(armour.atable) do
    armour.iatable[slot] = {}
		--print(slot)
		--display(subtable)
    for id, armourpiece in pairs(subtable) do
			--echo('\n' .. id)
			--local grade = armourpiece.grade
			--echo('  ' .. grade)
      --if not armour.iatable[slot][grade] then
        --armour.iatable[slot][grade] = {}
      --end
      table.insert(armour.iatable[slot], armourpiece)
    end
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="no" isFolder="no">
					<name>NewScript</name>
					<packageName></packageName>
					<script>local t = {
	{a=1, b=5, c='inv'},
	{a=2, b=4, c='worn'},
	{a=3, b=3, c='inv'},
	{a=4, b=2, c='inv'},
	{a=5, b=1, c='worn'},
}

local printseq = function()
	print('++++++++++++++++++++++++')
	for i,tab in ipairs(t) do
		print("%s: %s  %s  %s" %{str(i), str(tab.a), str(tab.b), str(tab.c)})
	end
end

printseq()
    -- sort
    table.sort(t, function(a, b)
        if a.c ~= b.c then
            return a.c &lt; b.c
        end

        return a.a &gt; b.a
    end)

printseq()
--table.sort(testItable, function(a,b) return a.c &lt; b.c end)
--printseq()


--[[function mysort(s)
    -- convert hash to array
    local t = {}
    for k, v in pairs(s) do
        table.insert(t, v)
    end

    -- sort
    table.sort(t, function(a, b)
        if a.players ~= b.players then
            return a.players &gt; b.players
        end

        return a.visits &gt; b.visits
    end)
    return t
end]]--</script>
					<eventHandlerList />
				</Script>
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Shop Stock</name>
				<packageName></packageName>
				<script>shopsys = shopsys or {}

function shopsys.stock(item)
  clearCmdLine()
  appendCmdLine("tt shop sully's stock " .. item .. ' for ')
end

function shopsys.reprice(item, price)
  send("tt shop sully's unstock " .. item)
  if price then
    send("tt shop sully's stock " .. item .. ' for ' .. price)
  else
    clearCmdLine()
    appendCmdLine("tt shop sully's stock " .. item .. ' for ')
  end
end

function shopsys.unstock(item)
  send("tt shop sully's unstock " .. item)
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>displayColors by demonnic</name>
				<packageName></packageName>
				<script>-- internal sorting function, sorts first by hue, then luminosity, then value
local sortColorsByHue =
  function(lhs, rhs)
    local lh, ll, lv = unpack(lhs.sort)
    local rh, rl, rv = unpack(rhs.sort)
    if lh &lt; rh then
      return true
    elseif lh &gt; rh then
      return false
    elseif ll &lt; rl then
      return true
    elseif ll &gt; rl then
      return false
    else
      return lv &lt; rv
    end
  end
-- internal sorting function, removes _ from snake_case and compares to camelCase
local sortColorsByName =
  function(a, b)
    local aname = string.gsub(string.lower(a.name), "_", "")
    local bname = string.gsub(string.lower(b.name), "_", "")
    return aname &lt; bname
  end
-- internal function used to turn sorted colors table into columns
local chunkify =
  function(tbl, num_chunks)
    local pop =
      function(t)
        return table.remove(t, 1)
      end
    local tbl = table.deepcopy(tbl)
    local tblsize = #tbl
    local base_chunk_size = tblsize / num_chunks
    local chunky_chunks = tblsize % num_chunks
    local chunks = {}
    for i = 1, num_chunks do
      local chunk_size = base_chunk_size
      if i &lt;= chunky_chunks then
        chunk_size = chunk_size + 1
      end
      local chunk = {}
      for j = 1, chunk_size do
        chunk[j] = pop(tbl)
      end
      chunks[i] = chunk
    end
    return chunks
  end
-- internal function, converts rgb to hsv
-- found at https://github.com/EmmanuelOga/columns/blob/master/utils/color.lua#L89
local rgbToHsv =
  function(r, g, b)
    r, g, b = r / 255, g / 255, b / 255
    local max, min = math.max(r, g, b), math.min(r, g, b)
    local h, s, v
    v = max
    local d = max - min
    if max == 0 then
      s = 0
    else
      s = d / max
    end
    if max == min then
      h = 0
      -- achromatic
    else
      if max == r then
        h = (g - b) / d
        if g &lt; b then
          h = h + 6
        end
      elseif max == g then
        h = (b - r) / d + 2
      elseif max == b then
        h = (r - g) / d + 4
      end
      h = h / 6
    end
    return h, s, v
  end
-- internal stepping function, removes some of the noise for a more pleasing sort
-- cribbed from the python on https://www.alanzucconi.com/2015/09/30/colour-sorting/
local step =
  function(r, g, b)
    local lum = math.sqrt(.241 * r + .691 * g + .068 * b)
    local reps = 8
    local h, s, v = rgbToHsv(r, g, b)
    local h2 = math.floor(h * reps)
    local lum2 = math.floor(lum * reps)
    local v2 = math.floor(v * reps)
    if h2 % 2 == 1 then
      v2 = reps - v2
      lum2 = reps - lum2
    end
    return h2, lum2, v2
  end

local function calc_luminosity(r, g, b)
  r = r &lt; 11 and r / (255 * 12.92) or ((0.055 + r / 255) / 1.055) ^ 2.4
  g = g &lt; 11 and g / (255 * 12.92) or ((0.055 + g / 255) / 1.055) ^ 2.4
  b = b &lt; 11 and b / (255 * 12.92) or ((0.055 + b / 255) / 1.055) ^ 2.4
  return (0.2126 * r) + (0.7152 * g) + (0.0722 * b)
end

local function include(color, options)
  if options.removeDupes then
    if string.find(color, "_") or string.find(color:lower(), 'gray') then
      return false
    else
      return true
    end
  else
    if string.find(color, "ansi_%d%d%d") then
      return false
    else
      return true
    end
  end
end

local function echoColor(color, options)
  local rgb = color.rgb
  local fgc = "white"
  if calc_luminosity(unpack(rgb)) &gt; 0.5 then
    fgc = "black"
  end
  local colorString
  if options.justText then
    colorString = string.format('&lt;%s:%s&gt; %-23s&lt;reset&gt; ', color.name, 'black', color.name, spacer)
  else
    colorString = string.format('&lt;%s:%s&gt; %-23s&lt;reset&gt; ', fgc, color.name, color.name)
  end
  if options.window == "main" then
    if options.echoOnly then
      cecho(colorString)
    else
      cechoLink(
        colorString,
        [[appendCmdLine("]] .. color.name .. [[")]],
        table.concat(rgb, ", "),
        true
      )
    end
  else
   if options.echoOnly then
      cecho(options.window, colorString)
    else
      cechoLink(
        options.window,
        colorString,
        [[appendCmdLine("]] .. color.name .. [[")]],
        table.concat(rgb, ", "),
        true
      )
    end
  end
end

function displayColors(options)
  local options = options or {}
  local optionsType = type(options)
  assert(
    optionsType == "table",
    "displayColors(options) argument error: options as table expects, got " .. optionsType
  )
  options.cols = options.cols or 4
  options.search = options.search or ""
  options.sort = options.sort or false
  if options.removeDupes == nil then
    options.removeDupes = true
  end
  if options.columnSort == nil then
    options.columnSort = true
  end
  if type(options.window) == "table" then
    options.window = options.window.name
  end
  options.window = options.window or "main"
  local color_table = options.color_table or color_table
  local cols, search, sort = options.cols, options.search, options.sort
  local colors = {}
  for k, v in pairs(color_table) do
    local color = {}
    color.rgb = v
    color.name = k
    color.sort = {step(unpack(v))}
    if include(k, options) and k:lower():find(search) then
      table.insert(colors, color)
    end
  end
  if sort then
    table.sort(colors, sortColorsByName)
  else
    table.sort(colors, sortColorsByHue)
  end
  if options.columnSort then
    local columns_table = chunkify(colors, cols)
    local lines = #columns_table[1]
    for i = 1, lines do
      for j = 1, cols do
        local color = columns_table[j][i]
        if color then
          echoColor(color, options)
        end
      end
      echo(options.window, "\n")
    end
  else
    local i = 1
    for _, k in ipairs(colors) do
      echoColor(k,options)
      if i == cols then
        echo(options.window, "\n")
        i = 1
      else
        i = i + 1
      end
    end
    if i ~= 1 then
      echo(options.window, "\n")
    end
  end
end</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage>
		<KeyGroup isActive="yes" isFolder="yes">
			<name>Personal</name>
			<packageName></packageName>
			<script></script>
			<command></command>
			<keyCode>-1</keyCode>
			<keyModifier>-1</keyModifier>
		</KeyGroup>
	</KeyPackage>
	<HelpPackage>
		<helpURL></helpURL>
	</HelpPackage>
</MudletPackage>
